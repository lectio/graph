// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Activity interface {
	IsActivity()
}

type ActivityContext interface {
	IsActivityContext()
}

type ActivityLogEntry interface {
	IsActivityLogEntry()
}

type Content interface {
	IsContent()
}

type ContentCollection interface {
	IsContentCollection()
}

type ContentSource interface {
	IsContentSource()
}

type Link interface {
	IsLink()
}

type Property interface {
	IsProperty()
}

type APISource struct {
	Name        NameText `json:"name"`
	APIEndpoint URLText  `json:"apiEndpoint"`
}

func (APISource) IsContentSource() {}

type Activities struct {
	History  []Activity        `json:"history"`
	Errors   []ActivityError   `json:"errors"`
	Warnings []ActivityWarning `json:"warnings"`
}

type ActivityError struct {
	ID      string               `json:"id"`
	Context ActivityContext      `json:"context"`
	Code    ActivityLogEntryCode `json:"code"`
	Message ActivityHumanMessage `json:"message"`
}

func (ActivityError) IsActivityLogEntry() {}

type ActivityWarning struct {
	ID      string               `json:"id"`
	Context ActivityContext      `json:"context"`
	Code    ActivityLogEntryCode `json:"code"`
	Message ActivityHumanMessage `json:"message"`
}

func (ActivityWarning) IsActivityLogEntry() {}

type ContentBodySettings struct {
	AllowFrontmatter              bool   `json:"allowFrontmatter"`
	FrontMatterPropertyNamePrefix string `json:"frontMatterPropertyNamePrefix"`
}

type ContentEditActivity struct {
	ID         string                 `json:"id"`
	Context    ActivityContext        `json:"context"`
	Code       ActivityLogEntryCode   `json:"code"`
	Name       ActivityMachineMessage `json:"name"`
	Message    ActivityHumanMessage   `json:"message"`
	Properties []Property             `json:"properties"`
	Original   string                 `json:"original"`
	Modified   string                 `json:"modified"`
}

func (ContentEditActivity) IsActivity() {}

type ContentSettings struct {
	Title   ContentTitleSettings   `json:"title"`
	Summary ContentSummarySettings `json:"summary"`
	Body    ContentBodySettings    `json:"body"`
}

type ContentSummarySettings struct {
	UseFirstSentenceOfBody        bool `json:"useFirstSentenceOfBody"`
	UseFirstSentenceOfBodyIfEmpty bool `json:"useFirstSentenceOfBodyIfEmpty"`
}

type ContentTitleSettings struct {
	RemovePipedSuffix         bool `json:"removePipedSuffix"`
	WarnAboutPipedSuffix      bool `json:"warnAboutPipedSuffix"`
	RemoveHyphenatedSuffix    bool `json:"removeHyphenatedSuffix"`
	WarnAboutHyphenatedSuffix bool `json:"warnAboutHyphenatedSuffix"`
}

type FlagProperty struct {
	Name  PropertyName `json:"name"`
	Value bool         `json:"value"`
}

func (FlagProperty) IsProperty() {}

type HTTPClientSettings struct {
	UserAgent string          `json:"userAgent"`
	Timeout   TimeoutDuration `json:"timeout"`
}

type HarvestedLink struct {
	ID           string               `json:"id"`
	URLText      URLText              `json:"urlText"`
	FinalURL     *string              `json:"finalURL"`
	IsValid      bool                 `json:"isValid"`
	Title        ContentTitleText     `json:"title"`
	Summary      ContentSummaryText   `json:"summary"`
	Body         ContentBodyText      `json:"body"`
	Properties   *Properties          `json:"properties"`
	IsIgnored    bool                 `json:"isIgnored"`
	IgnoreReason *InterpolatedMessage `json:"ignoreReason"`
}

func (HarvestedLink) IsContent() {}
func (HarvestedLink) IsLink()    {}

type HarvestedLinks struct {
	ID         string          `json:"id"`
	Source     ContentSource   `json:"source"`
	Content    []HarvestedLink `json:"content"`
	Activities Activities      `json:"activities"`
	Properties *Properties     `json:"properties"`
}

func (HarvestedLinks) IsContentCollection() {}

type LinkHarvesterSettings struct {
	IgnoreURLsRegExprs         []*RegularExpression   `json:"ignoreURLsRegExprs"`
	RemoveParamsFromURLsRegEx  []*RegularExpression   `json:"removeParamsFromURLsRegEx"`
	FollowHTMLRedirects        bool                   `json:"followHTMLRedirects"`
	DuplicateLinkRetentionType DuplicateRetentionType `json:"duplicateLinkRetentionType"`
	SkipURLHumanMessageFormat  InterpolatedMessage    `json:"skipURLHumanMessageFormat"`
	InspectLinkDestinations    bool                   `json:"inspectLinkDestinations"`
	DownloadLinkAttachments    bool                   `json:"downloadLinkAttachments"`
}

type NumericProperty struct {
	Name  PropertyName `json:"name"`
	Value int          `json:"value"`
}

func (NumericProperty) IsProperty() {}

type Properties struct {
	All []Property `json:"all"`
}

type SettingsBundle struct {
	Name       SettingsBundleName    `json:"name"`
	Harvester  LinkHarvesterSettings `json:"harvester"`
	Content    ContentSettings       `json:"content"`
	HTTPClient HTTPClientSettings    `json:"httpClient"`
}

type TextProperty struct {
	Name  PropertyName `json:"name"`
	Value string       `json:"value"`
}

func (TextProperty) IsProperty() {}

type DuplicateRetentionType string

const (
	DuplicateRetentionTypeRetainAll                   DuplicateRetentionType = "RetainAll"
	DuplicateRetentionTypeRetainAllButWarnOnDuplicate DuplicateRetentionType = "RetainAllButWarnOnDuplicate"
	DuplicateRetentionTypeRetainFirstSkipRemaining    DuplicateRetentionType = "RetainFirstSkipRemaining"
	DuplicateRetentionTypeRetainLastReplacingPrevious DuplicateRetentionType = "RetainLastReplacingPrevious"
)

var AllDuplicateRetentionType = []DuplicateRetentionType{
	DuplicateRetentionTypeRetainAll,
	DuplicateRetentionTypeRetainAllButWarnOnDuplicate,
	DuplicateRetentionTypeRetainFirstSkipRemaining,
	DuplicateRetentionTypeRetainLastReplacingPrevious,
}

func (e DuplicateRetentionType) IsValid() bool {
	switch e {
	case DuplicateRetentionTypeRetainAll, DuplicateRetentionTypeRetainAllButWarnOnDuplicate, DuplicateRetentionTypeRetainFirstSkipRemaining, DuplicateRetentionTypeRetainLastReplacingPrevious:
		return true
	}
	return false
}

func (e DuplicateRetentionType) String() string {
	return string(e)
}

func (e *DuplicateRetentionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DuplicateRetentionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DuplicateRetentionType", str)
	}
	return nil
}

func (e DuplicateRetentionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
