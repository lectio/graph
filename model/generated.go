// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Content interface {
	IsContent()
}

type ContentCollection interface {
	IsContentCollection()
}

type ContentSource interface {
	IsContentSource()
}

type Link interface {
	IsLink()
}

type APISource struct {
	Name        NameText `json:"name"`
	APIEndpoint URLText  `json:"apiEndpoint"`
}

func (APISource) IsContentSource() {}

type HTTPClientSettings struct {
	UserAgent string          `json:"userAgent"`
	Timeout   TimeoutDuration `json:"timeout"`
}

type HarvestedLink struct {
	ID      string             `json:"id"`
	Title   ContentTitleText   `json:"title"`
	Summary ContentSummaryText `json:"summary"`
	Body    ContentBodyText    `json:"body"`
	URL     string             `json:"url"`
}

func (HarvestedLink) IsContent() {}
func (HarvestedLink) IsLink()    {}

type HarvestedLinks struct {
	ID      string          `json:"id"`
	Source  ContentSource   `json:"source"`
	Content []HarvestedLink `json:"content"`
}

func (HarvestedLinks) IsContentCollection() {}

type LinkFinalizerSettings struct {
	IgnoreURLsRegExprs        []*RegularExpression `json:"ignoreURLsRegExprs"`
	RemoveParamsFromURLsRegEx []*RegularExpression `json:"removeParamsFromURLsRegEx"`
	FollowHTMLRedirects       bool                 `json:"followHTMLRedirects"`
}

type SettingsBundle struct {
	Name          SettingsBundleName    `json:"name"`
	LinkFinalizer LinkFinalizerSettings `json:"linkFinalizer"`
	HTTPClient    HTTPClientSettings    `json:"httpClient"`
}

type ContentSummaryOption string

const (
	ContentSummaryOptionUseFirstSentenceOfBodyIfEmpty ContentSummaryOption = "UseFirstSentenceOfBodyIfEmpty"
)

var AllContentSummaryOption = []ContentSummaryOption{
	ContentSummaryOptionUseFirstSentenceOfBodyIfEmpty,
}

func (e ContentSummaryOption) IsValid() bool {
	switch e {
	case ContentSummaryOptionUseFirstSentenceOfBodyIfEmpty:
		return true
	}
	return false
}

func (e ContentSummaryOption) String() string {
	return string(e)
}

func (e *ContentSummaryOption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentSummaryOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentSummaryOption", str)
	}
	return nil
}

func (e ContentSummaryOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContentTitleOption string

const (
	ContentTitleOptionRemovePipedSuffix      ContentTitleOption = "RemovePipedSuffix"
	ContentTitleOptionRemoveHyphenatedSuffix ContentTitleOption = "RemoveHyphenatedSuffix"
)

var AllContentTitleOption = []ContentTitleOption{
	ContentTitleOptionRemovePipedSuffix,
	ContentTitleOptionRemoveHyphenatedSuffix,
}

func (e ContentTitleOption) IsValid() bool {
	switch e {
	case ContentTitleOptionRemovePipedSuffix, ContentTitleOptionRemoveHyphenatedSuffix:
		return true
	}
	return false
}

func (e ContentTitleOption) String() string {
	return string(e)
}

func (e *ContentTitleOption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentTitleOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentTitleOption", str)
	}
	return nil
}

func (e ContentTitleOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
