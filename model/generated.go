// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type APISource interface {
	IsAPISource()
}

type Activity interface {
	IsActivity()
}

type Content interface {
	IsContent()
}

type ContentCollection interface {
	IsContentCollection()
}

type ContentSource interface {
	IsContentSource()
}

type HTTPCache interface {
	IsHTTPCache()
}

type Link interface {
	IsLink()
}

type LinkScorer interface {
	IsLinkScorer()
}

type LinkScores interface {
	IsLinkScores()
}

type PersistentSettings interface {
	IsPersistentSettings()
}

type PipelineExecution interface {
	IsPipelineExecution()
}

type Property interface {
	IsProperty()
}

type Repository interface {
	IsRepository()
}

type SecretValue interface {
	IsSecretValue()
}

type Taxonomy interface {
	IsTaxonomy()
}

type Activities struct {
	History  []Activity        `json:"history"`
	Errors   []ActivityError   `json:"errors"`
	Warnings []ActivityWarning `json:"warnings"`
}

type ActivityError struct {
	ID      string               `json:"id"`
	Context ActivityContext      `json:"context"`
	Code    ActivityCode         `json:"code"`
	Message ActivityHumanMessage `json:"message"`
}

type ActivityLog struct {
	ID         string                 `json:"id"`
	Context    ActivityContext        `json:"context"`
	Code       ActivityCode           `json:"code"`
	Name       ActivityMachineMessage `json:"name"`
	Message    ActivityHumanMessage   `json:"message"`
	Properties []Property             `json:"properties"`
}

func (ActivityLog) IsActivity() {}

type ActivityWarning struct {
	ID      string               `json:"id"`
	Context ActivityContext      `json:"context"`
	Code    ActivityCode         `json:"code"`
	Message ActivityHumanMessage `json:"message"`
}

type AggregateLinkScorer struct {
	MachineName string `json:"machineName"`
	HumanName   string `json:"humanName"`
}

func (AggregateLinkScorer) IsLinkScorer() {}

type AggregateLinkScores struct {
	Scorer        LinkScorer   `json:"scorer"`
	Scores        []LinkScores `json:"scores"`
	IsValid       bool         `json:"isValid"`
	TargetURL     URLText      `json:"targetURL"`
	SharesCount   int          `json:"sharesCount"`
	CommentsCount int          `json:"commentsCount"`
}

func (AggregateLinkScores) IsLinkScores() {}

type Bookmark struct {
	ID         string             `json:"id"`
	Link       BookmarkLink       `json:"link"`
	Title      ContentTitleText   `json:"title"`
	Summary    ContentSummaryText `json:"summary"`
	Body       ContentBodyText    `json:"body"`
	Taxonomies []Taxonomy         `json:"taxonomies"`
	Properties *Properties        `json:"properties"`
	Scores     LinkScores         `json:"scores"`
}

func (Bookmark) IsContent() {}

type BookmarkLink struct {
	ID              string  `json:"id"`
	OriginalURLText URLText `json:"originalURLText"`
	FinalURL        *URL    `json:"finalURL"`
	IsValid         bool    `json:"isValid"`
}

func (BookmarkLink) IsLink() {}

type Bookmarks struct {
	ID         string             `json:"id"`
	Source     BookmarksAPISource `json:"source"`
	Content    []Bookmark         `json:"content"`
	Activities Activities         `json:"activities"`
	Properties *Properties        `json:"properties"`
}

func (Bookmarks) IsContentCollection() {}

type BookmarksAPISource struct {
	Name        NameText `json:"name"`
	APIEndpoint URLText  `json:"apiEndpoint"`
}

func (BookmarksAPISource) IsContentSource() {}
func (BookmarksAPISource) IsAPISource()     {}

type BookmarksToMarkdownPipelineExecution struct {
	Pipeline    PipelineURL               `json:"pipeline"`
	Strategy    PipelineExecutionStrategy `json:"strategy"`
	ExecutionID PipelineExecutionID       `json:"executionID"`
	Bookmarks   *Bookmarks                `json:"bookmarks"`
	Activities  Activities                `json:"activities"`
}

func (BookmarksToMarkdownPipelineExecution) IsPipelineExecution() {}

type BookmarksToMarkdownPipelineInput struct {
	Strategy     PipelineExecutionStrategy `json:"strategy"`
	BookmarksURL URLText                   `json:"bookmarksURL"`
	Settings     SettingsPath              `json:"settings"`
	Repository   RepositoryName            `json:"repository"`
}

type ContentBodySettings struct {
	AllowFrontmatter              bool   `json:"allowFrontmatter"`
	FrontMatterPropertyNamePrefix string `json:"frontMatterPropertyNamePrefix"`
}

type ContentEditActivity struct {
	ID         string                 `json:"id"`
	Context    ActivityContext        `json:"context"`
	Code       ActivityCode           `json:"code"`
	Name       ActivityMachineMessage `json:"name"`
	Message    ActivityHumanMessage   `json:"message"`
	Properties []Property             `json:"properties"`
	Original   string                 `json:"original"`
	Modified   string                 `json:"modified"`
}

func (ContentEditActivity) IsActivity() {}

type ContentSettings struct {
	Store   SettingsStore          `json:"store"`
	Title   ContentTitleSettings   `json:"title"`
	Summary ContentSummarySettings `json:"summary"`
	Body    ContentBodySettings    `json:"body"`
}

func (ContentSettings) IsPersistentSettings() {}

type ContentSummarySettings struct {
	Policy ContentSummaryPolicy `json:"policy"`
}

type ContentTitleSettings struct {
	PipedSuffixPolicy      ContentTitleSuffixPolicy `json:"pipedSuffixPolicy"`
	HyphenatedSuffixPolicy ContentTitleSuffixPolicy `json:"hyphenatedSuffixPolicy"`
}

type DateTimeProperty struct {
	Name  PropertyName `json:"name"`
	Value DateTime     `json:"value"`
}

func (DateTimeProperty) IsProperty() {}

type ExecutePipelineInput struct {
	Pipeline PipelineURL               `json:"pipeline"`
	Strategy PipelineExecutionStrategy `json:"strategy"`
	Settings SettingsPath              `json:"settings"`
	Params   []PipelineParamInput      `json:"params"`
}

type FacebookLinkScorer struct {
	MachineName string `json:"machineName"`
	HumanName   string `json:"humanName"`
}

func (FacebookLinkScorer) IsLinkScorer() {}

type FacebookLinkScores struct {
	Scorer        LinkScorer `json:"scorer"`
	IsValid       bool       `json:"isValid"`
	TargetURL     URLText    `json:"targetURL"`
	SharesCount   int        `json:"sharesCount"`
	CommentsCount int        `json:"commentsCount"`
}

func (FacebookLinkScores) IsLinkScores() {}

type FileRepository struct {
	Name           RepositoryName `json:"name"`
	URL            URLText        `json:"url"`
	RootPath       string         `json:"rootPath"`
	CreateRootPath bool           `json:"createRootPath"`
}

func (FileRepository) IsRepository() {}

type FlagProperty struct {
	Name  PropertyName `json:"name"`
	Value bool         `json:"value"`
}

func (FlagProperty) IsProperty() {}

type FlatTaxonomy struct {
	Name TaxonomyName `json:"name"`
	Taxa []TaxonName  `json:"taxa"`
}

func (FlatTaxonomy) IsTaxonomy() {}

type GitHubRepository struct {
	Name  RepositoryName `json:"name"`
	URL   URLText        `json:"url"`
	Token SecretText     `json:"token"`
}

func (GitHubRepository) IsRepository() {}

type HTTPClientSettings struct {
	Store     SettingsStore   `json:"store"`
	UserAgent string          `json:"userAgent"`
	Timeout   TimeoutDuration `json:"timeout"`
	Cache     HTTPCache       `json:"cache"`
}

func (HTTPClientSettings) IsPersistentSettings() {}

type HTTPDiskCache struct {
	Name           string     `json:"name"`
	Activities     Activities `json:"activities"`
	BasePath       string     `json:"basePath"`
	CreateBasePath bool       `json:"createBasePath"`
}

func (HTTPDiskCache) IsHTTPCache() {}

type HTTPMemoryCache struct {
	Name       string     `json:"name"`
	Activities Activities `json:"activities"`
}

func (HTTPMemoryCache) IsHTTPCache() {}

type HiearchicalTaxonomy struct {
	Name TaxonomyName `json:"name"`
	Taxa []TaxonNode  `json:"taxa"`
}

func (HiearchicalTaxonomy) IsTaxonomy() {}

type LinkLifecyleSettings struct {
	Store                                       SettingsStore               `json:"store"`
	TraverseLinks                               bool                        `json:"traverseLinks"`
	ScoreLinks                                  LinkScoresLifecycleSettings `json:"scoreLinks"`
	IgnoreURLsRegExprs                          []*RegularExpression        `json:"ignoreURLsRegExprs"`
	RemoveParamsFromURLsRegEx                   []*RegularExpression        `json:"removeParamsFromURLsRegEx"`
	FollowRedirectsInLinkDestinationHTMLContent bool                        `json:"followRedirectsInLinkDestinationHTMLContent"`
	ParseMetaDataInLinkDestinationHTMLContent   bool                        `json:"parseMetaDataInLinkDestinationHTMLContent"`
	DownloadLinkDestinationAttachments          bool                        `json:"downloadLinkDestinationAttachments"`
}

func (LinkLifecyleSettings) IsPersistentSettings() {}

type LinkScoresLifecycleSettings struct {
	Score    bool `json:"score"`
	Simulate bool `json:"simulate"`
}

type LinkedInLinkScorer struct {
	MachineName string `json:"machineName"`
	HumanName   string `json:"humanName"`
}

func (LinkedInLinkScorer) IsLinkScorer() {}

type LinkedInLinkScores struct {
	Scorer        LinkScorer `json:"scorer"`
	IsValid       bool       `json:"isValid"`
	TargetURL     URLText    `json:"targetURL"`
	SharesCount   int        `json:"sharesCount"`
	CommentsCount int        `json:"commentsCount"`
}

func (LinkedInLinkScores) IsLinkScores() {}

type MarkdownGeneratorSettings struct {
	Store               SettingsStore `json:"store"`
	CancelOnWriteErrors int           `json:"cancelOnWriteErrors"`
	ContentPath         string        `json:"contentPath"`
	ImagesPath          string        `json:"imagesPath"`
	ImagesURLRel        URLText       `json:"imagesURLRel"`
}

func (MarkdownGeneratorSettings) IsPersistentSettings() {}

type NumericProperty struct {
	Name  PropertyName `json:"name"`
	Value int          `json:"value"`
}

func (NumericProperty) IsProperty() {}

type ObservationSettings struct {
	Store                SettingsStore        `json:"store"`
	ProgressReporterType ProgressReporterType `json:"progressReporterType"`
}

func (ObservationSettings) IsPersistentSettings() {}

type PipelineParamInput struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type Properties struct {
	All []Property `json:"all"`
}

type Repositories struct {
	Store SettingsStore `json:"store"`
	All   []Repository  `json:"all"`
}

func (Repositories) IsPersistentSettings() {}

type SecretText struct {
	Vault         SecretsVault `json:"vault"`
	EncryptedText string       `json:"encryptedText"`
}

func (SecretText) IsSecretValue() {}

type SettingsStore struct {
	Name SettingsStoreName `json:"name"`
}

type TaxonNode struct {
	Taxon *TaxonName  `json:"taxon"`
	Taxa  []TaxonNode `json:"taxa"`
}

type TempFileRepository struct {
	Name   RepositoryName `json:"name"`
	URL    URLText        `json:"url"`
	Prefix string         `json:"prefix"`
}

func (TempFileRepository) IsRepository() {}

type TextProperty struct {
	Name  PropertyName `json:"name"`
	Value string       `json:"value"`
}

func (TextProperty) IsProperty() {}

type ContentSummaryPolicy string

const (
	ContentSummaryPolicyAlwaysUseFirstSentenceOfContentBody  ContentSummaryPolicy = "AlwaysUseFirstSentenceOfContentBody"
	ContentSummaryPolicyUseFirstSentenceOfContentBodyIfEmpty ContentSummaryPolicy = "UseFirstSentenceOfContentBodyIfEmpty"
)

var AllContentSummaryPolicy = []ContentSummaryPolicy{
	ContentSummaryPolicyAlwaysUseFirstSentenceOfContentBody,
	ContentSummaryPolicyUseFirstSentenceOfContentBodyIfEmpty,
}

func (e ContentSummaryPolicy) IsValid() bool {
	switch e {
	case ContentSummaryPolicyAlwaysUseFirstSentenceOfContentBody, ContentSummaryPolicyUseFirstSentenceOfContentBodyIfEmpty:
		return true
	}
	return false
}

func (e ContentSummaryPolicy) String() string {
	return string(e)
}

func (e *ContentSummaryPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentSummaryPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentSummaryPolicy", str)
	}
	return nil
}

func (e ContentSummaryPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContentTitleSuffixPolicy string

const (
	ContentTitleSuffixPolicyRemove         ContentTitleSuffixPolicy = "Remove"
	ContentTitleSuffixPolicyWarnIfDetected ContentTitleSuffixPolicy = "WarnIfDetected"
)

var AllContentTitleSuffixPolicy = []ContentTitleSuffixPolicy{
	ContentTitleSuffixPolicyRemove,
	ContentTitleSuffixPolicyWarnIfDetected,
}

func (e ContentTitleSuffixPolicy) IsValid() bool {
	switch e {
	case ContentTitleSuffixPolicyRemove, ContentTitleSuffixPolicyWarnIfDetected:
		return true
	}
	return false
}

func (e ContentTitleSuffixPolicy) String() string {
	return string(e)
}

func (e *ContentTitleSuffixPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentTitleSuffixPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentTitleSuffixPolicy", str)
	}
	return nil
}

func (e ContentTitleSuffixPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PipelineExecutionStrategy string

const (
	PipelineExecutionStrategyAsynchronous PipelineExecutionStrategy = "Asynchronous"
	PipelineExecutionStrategySynchronous  PipelineExecutionStrategy = "Synchronous"
)

var AllPipelineExecutionStrategy = []PipelineExecutionStrategy{
	PipelineExecutionStrategyAsynchronous,
	PipelineExecutionStrategySynchronous,
}

func (e PipelineExecutionStrategy) IsValid() bool {
	switch e {
	case PipelineExecutionStrategyAsynchronous, PipelineExecutionStrategySynchronous:
		return true
	}
	return false
}

func (e PipelineExecutionStrategy) String() string {
	return string(e)
}

func (e *PipelineExecutionStrategy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PipelineExecutionStrategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PipelineExecutionStrategy", str)
	}
	return nil
}

func (e PipelineExecutionStrategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProgressReporterType string

const (
	ProgressReporterTypeSilent      ProgressReporterType = "Silent"
	ProgressReporterTypeSummary     ProgressReporterType = "Summary"
	ProgressReporterTypeProgressBar ProgressReporterType = "ProgressBar"
)

var AllProgressReporterType = []ProgressReporterType{
	ProgressReporterTypeSilent,
	ProgressReporterTypeSummary,
	ProgressReporterTypeProgressBar,
}

func (e ProgressReporterType) IsValid() bool {
	switch e {
	case ProgressReporterTypeSilent, ProgressReporterTypeSummary, ProgressReporterTypeProgressBar:
		return true
	}
	return false
}

func (e ProgressReporterType) String() string {
	return string(e)
}

func (e *ProgressReporterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProgressReporterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProgressReporterType", str)
	}
	return nil
}

func (e ProgressReporterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
