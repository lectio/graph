// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Activity interface {
	IsActivity()
}

type ActivityContext interface {
	IsActivityContext()
}

type ActivityLogEntry interface {
	IsActivityLogEntry()
}

type Content interface {
	IsContent()
}

type ContentCollection interface {
	IsContentCollection()
}

type ContentSource interface {
	IsContentSource()
}

type Link interface {
	IsLink()
}

type LinkScorer interface {
	IsLinkScorer()
}

type LinkScores interface {
	IsLinkScores()
}

type Property interface {
	IsProperty()
}

type APISource struct {
	Name        NameText `json:"name"`
	APIEndpoint URLText  `json:"apiEndpoint"`
}

func (APISource) IsContentSource() {}

type Activities struct {
	History  []Activity        `json:"history"`
	Errors   []ActivityError   `json:"errors"`
	Warnings []ActivityWarning `json:"warnings"`
}

type ActivityError struct {
	ID      string               `json:"id"`
	Context ActivityContext      `json:"context"`
	Code    ActivityLogEntryCode `json:"code"`
	Message ActivityHumanMessage `json:"message"`
}

func (ActivityError) IsActivityLogEntry() {}

type ActivityWarning struct {
	ID      string               `json:"id"`
	Context ActivityContext      `json:"context"`
	Code    ActivityLogEntryCode `json:"code"`
	Message ActivityHumanMessage `json:"message"`
}

func (ActivityWarning) IsActivityLogEntry() {}

type AggregateLinkScorer struct {
	MachineName string `json:"machineName"`
	HumanName   string `json:"humanName"`
}

func (AggregateLinkScorer) IsLinkScorer() {}

type AggregateLinkScores struct {
	Scorer        LinkScorer   `json:"scorer"`
	Scores        []LinkScores `json:"scores"`
	IsValid       bool         `json:"isValid"`
	TargetURL     URLText      `json:"targetURL"`
	SharesCount   int          `json:"sharesCount"`
	CommentsCount int          `json:"commentsCount"`
}

func (AggregateLinkScores) IsLinkScores() {}

type ContentBodySettings struct {
	AllowFrontmatter              bool   `json:"allowFrontmatter"`
	FrontMatterPropertyNamePrefix string `json:"frontMatterPropertyNamePrefix"`
}

type ContentEditActivity struct {
	ID         string                 `json:"id"`
	Context    ActivityContext        `json:"context"`
	Code       ActivityLogEntryCode   `json:"code"`
	Name       ActivityMachineMessage `json:"name"`
	Message    ActivityHumanMessage   `json:"message"`
	Properties []Property             `json:"properties"`
	Original   string                 `json:"original"`
	Modified   string                 `json:"modified"`
}

func (ContentEditActivity) IsActivity() {}

type ContentSettings struct {
	Title   ContentTitleSettings   `json:"title"`
	Summary ContentSummarySettings `json:"summary"`
	Body    ContentBodySettings    `json:"body"`
}

type ContentSummarySettings struct {
	Policy ContentSummaryPolicy `json:"policy"`
}

type ContentTitleSettings struct {
	PipedSuffixPolicy      ContentTitleSuffixPolicy `json:"pipedSuffixPolicy"`
	HyphenatedSuffixPolicy ContentTitleSuffixPolicy `json:"hyphenatedSuffixPolicy"`
}

type FacebookLinkScorer struct {
	MachineName string `json:"machineName"`
	HumanName   string `json:"humanName"`
}

func (FacebookLinkScorer) IsLinkScorer() {}

type FacebookLinkScores struct {
	Scorer        LinkScorer `json:"scorer"`
	IsValid       bool       `json:"isValid"`
	TargetURL     URLText    `json:"targetURL"`
	SharesCount   int        `json:"sharesCount"`
	CommentsCount int        `json:"commentsCount"`
}

func (FacebookLinkScores) IsLinkScores() {}

type FlagProperty struct {
	Name  PropertyName `json:"name"`
	Value bool         `json:"value"`
}

func (FlagProperty) IsProperty() {}

type HTTPClientSettings struct {
	UserAgent string          `json:"userAgent"`
	Timeout   TimeoutDuration `json:"timeout"`
}

type HarvestedLink struct {
	ID              string               `json:"id"`
	URLText         URLText              `json:"urlText"`
	FinalizedURL    *URL                 `json:"finalizedURL"`
	IsURLValid      bool                 `json:"isURLValid"`
	Title           ContentTitleText     `json:"title"`
	Summary         ContentSummaryText   `json:"summary"`
	Body            ContentBodyText      `json:"body"`
	Properties      *Properties          `json:"properties"`
	IsURLIgnored    bool                 `json:"isURLIgnored"`
	URLIgnoreReason *InterpolatedMessage `json:"urlIgnoreReason"`
	Scores          LinkScores           `json:"scores"`
}

func (HarvestedLink) IsContent() {}
func (HarvestedLink) IsLink()    {}

type HarvestedLinks struct {
	ID         string          `json:"id"`
	Source     ContentSource   `json:"source"`
	Content    []HarvestedLink `json:"content"`
	Activities Activities      `json:"activities"`
	Properties *Properties     `json:"properties"`
}

func (HarvestedLinks) IsContentCollection() {}

type LinkHarvesterSettings struct {
	IgnoreURLsRegExprs                          []*RegularExpression      `json:"ignoreURLsRegExprs"`
	RemoveParamsFromURLsRegEx                   []*RegularExpression      `json:"removeParamsFromURLsRegEx"`
	SkipURLHumanMessageFormat                   InterpolatedMessage       `json:"skipURLHumanMessageFormat"`
	FollowRedirectsInLinkDestinationHTMLContent bool                      `json:"followRedirectsInLinkDestinationHTMLContent"`
	ParseMetaDataInLinkDestinationHTMLContent   bool                      `json:"parseMetaDataInLinkDestinationHTMLContent"`
	DownloadLinkDestinationAttachments          bool                      `json:"downloadLinkDestinationAttachments"`
	InvalidLinksPolicy                          InvalidLinksPolicy        `json:"invalidLinksPolicy"`
	DuplicateLinksPolicy                        DuplicatesRetentionPolicy `json:"duplicateLinksPolicy"`
}

type LinkedInLinkScorer struct {
	MachineName string `json:"machineName"`
	HumanName   string `json:"humanName"`
}

func (LinkedInLinkScorer) IsLinkScorer() {}

type LinkedInLinkScores struct {
	Scorer        LinkScorer `json:"scorer"`
	IsValid       bool       `json:"isValid"`
	TargetURL     URLText    `json:"targetURL"`
	SharesCount   int        `json:"sharesCount"`
	CommentsCount int        `json:"commentsCount"`
}

func (LinkedInLinkScores) IsLinkScores() {}

type NumericProperty struct {
	Name  PropertyName `json:"name"`
	Value int          `json:"value"`
}

func (NumericProperty) IsProperty() {}

type ObservationSettings struct {
	ProgressReporterType ProgressReporterType `json:"progressReporterType"`
}

type Properties struct {
	All []Property `json:"all"`
}

type SettingsBundle struct {
	Name       SettingsBundleName    `json:"name"`
	Harvester  LinkHarvesterSettings `json:"harvester"`
	Content    ContentSettings       `json:"content"`
	HTTPClient HTTPClientSettings    `json:"httpClient"`
	Observe    ObservationSettings   `json:"observe"`
}

type TextProperty struct {
	Name  PropertyName `json:"name"`
	Value string       `json:"value"`
}

func (TextProperty) IsProperty() {}

type ContentSummaryPolicy string

const (
	ContentSummaryPolicyAlwaysUseFirstSentenceOfContentBody  ContentSummaryPolicy = "AlwaysUseFirstSentenceOfContentBody"
	ContentSummaryPolicyUseFirstSentenceOfContentBodyIfEmpty ContentSummaryPolicy = "UseFirstSentenceOfContentBodyIfEmpty"
)

var AllContentSummaryPolicy = []ContentSummaryPolicy{
	ContentSummaryPolicyAlwaysUseFirstSentenceOfContentBody,
	ContentSummaryPolicyUseFirstSentenceOfContentBodyIfEmpty,
}

func (e ContentSummaryPolicy) IsValid() bool {
	switch e {
	case ContentSummaryPolicyAlwaysUseFirstSentenceOfContentBody, ContentSummaryPolicyUseFirstSentenceOfContentBodyIfEmpty:
		return true
	}
	return false
}

func (e ContentSummaryPolicy) String() string {
	return string(e)
}

func (e *ContentSummaryPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentSummaryPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentSummaryPolicy", str)
	}
	return nil
}

func (e ContentSummaryPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContentTitleSuffixPolicy string

const (
	ContentTitleSuffixPolicyRemove         ContentTitleSuffixPolicy = "Remove"
	ContentTitleSuffixPolicyWarnIfDetected ContentTitleSuffixPolicy = "WarnIfDetected"
)

var AllContentTitleSuffixPolicy = []ContentTitleSuffixPolicy{
	ContentTitleSuffixPolicyRemove,
	ContentTitleSuffixPolicyWarnIfDetected,
}

func (e ContentTitleSuffixPolicy) IsValid() bool {
	switch e {
	case ContentTitleSuffixPolicyRemove, ContentTitleSuffixPolicyWarnIfDetected:
		return true
	}
	return false
}

func (e ContentTitleSuffixPolicy) String() string {
	return string(e)
}

func (e *ContentTitleSuffixPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentTitleSuffixPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentTitleSuffixPolicy", str)
	}
	return nil
}

func (e ContentTitleSuffixPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DuplicatesRetentionPolicy string

const (
	DuplicatesRetentionPolicyRetainAll                   DuplicatesRetentionPolicy = "RetainAll"
	DuplicatesRetentionPolicyRetainAllButWarnOnDuplicate DuplicatesRetentionPolicy = "RetainAllButWarnOnDuplicate"
	DuplicatesRetentionPolicyRetainFirstSkipRemaining    DuplicatesRetentionPolicy = "RetainFirstSkipRemaining"
	DuplicatesRetentionPolicyRetainLastReplacingPrevious DuplicatesRetentionPolicy = "RetainLastReplacingPrevious"
)

var AllDuplicatesRetentionPolicy = []DuplicatesRetentionPolicy{
	DuplicatesRetentionPolicyRetainAll,
	DuplicatesRetentionPolicyRetainAllButWarnOnDuplicate,
	DuplicatesRetentionPolicyRetainFirstSkipRemaining,
	DuplicatesRetentionPolicyRetainLastReplacingPrevious,
}

func (e DuplicatesRetentionPolicy) IsValid() bool {
	switch e {
	case DuplicatesRetentionPolicyRetainAll, DuplicatesRetentionPolicyRetainAllButWarnOnDuplicate, DuplicatesRetentionPolicyRetainFirstSkipRemaining, DuplicatesRetentionPolicyRetainLastReplacingPrevious:
		return true
	}
	return false
}

func (e DuplicatesRetentionPolicy) String() string {
	return string(e)
}

func (e *DuplicatesRetentionPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DuplicatesRetentionPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DuplicatesRetentionPolicy", str)
	}
	return nil
}

func (e DuplicatesRetentionPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InvalidLinksPolicy string

const (
	InvalidLinksPolicyRetainWithError             InvalidLinksPolicy = "RetainWithError"
	InvalidLinksPolicyRetainWithWarning           InvalidLinksPolicy = "RetainWithWarning"
	InvalidLinksPolicyRetainWithoutErrorOrWarning InvalidLinksPolicy = "RetainWithoutErrorOrWarning"
	InvalidLinksPolicySkipWithError               InvalidLinksPolicy = "SkipWithError"
	InvalidLinksPolicySkipWithWarning             InvalidLinksPolicy = "SkipWithWarning"
	InvalidLinksPolicySkipWithoutErrorOrWarning   InvalidLinksPolicy = "SkipWithoutErrorOrWarning"
)

var AllInvalidLinksPolicy = []InvalidLinksPolicy{
	InvalidLinksPolicyRetainWithError,
	InvalidLinksPolicyRetainWithWarning,
	InvalidLinksPolicyRetainWithoutErrorOrWarning,
	InvalidLinksPolicySkipWithError,
	InvalidLinksPolicySkipWithWarning,
	InvalidLinksPolicySkipWithoutErrorOrWarning,
}

func (e InvalidLinksPolicy) IsValid() bool {
	switch e {
	case InvalidLinksPolicyRetainWithError, InvalidLinksPolicyRetainWithWarning, InvalidLinksPolicyRetainWithoutErrorOrWarning, InvalidLinksPolicySkipWithError, InvalidLinksPolicySkipWithWarning, InvalidLinksPolicySkipWithoutErrorOrWarning:
		return true
	}
	return false
}

func (e InvalidLinksPolicy) String() string {
	return string(e)
}

func (e *InvalidLinksPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvalidLinksPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InvalidLinksPolicy", str)
	}
	return nil
}

func (e InvalidLinksPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProgressReporterType string

const (
	ProgressReporterTypeSilent                 ProgressReporterType = "Silent"
	ProgressReporterTypeCommandLineProgressBar ProgressReporterType = "CommandLineProgressBar"
)

var AllProgressReporterType = []ProgressReporterType{
	ProgressReporterTypeSilent,
	ProgressReporterTypeCommandLineProgressBar,
}

func (e ProgressReporterType) IsValid() bool {
	switch e {
	case ProgressReporterTypeSilent, ProgressReporterTypeCommandLineProgressBar:
		return true
	}
	return false
}

func (e ProgressReporterType) String() string {
	return string(e)
}

func (e *ProgressReporterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProgressReporterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProgressReporterType", str)
	}
	return nil
}

func (e ProgressReporterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
