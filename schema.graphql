scalar NameText
scalar SmallText
scalar MediumText
scalar LargeText
scalar ExtraLargeText

scalar RegularExpression
scalar WarningMessage
scalar ErrorMessage
scalar Error

scalar URLText
scalar URL
scalar Resource

scalar SettingsBundleName

scalar TimeoutDuration

interface ContentSource {
    name: NameText!
}

type HTTPClientSettings {
    userAgent: String!
    timeout: TimeoutDuration!
} 

type LinkHarvesterSettings {
    ignoreURLsRegExprs : [RegularExpression]
    removeParamsFromURLsRegEx : [RegularExpression]
    followHTMLRedirects : Boolean!
}

type ContentTitleSettings {
    removePipedSuffix : Boolean!
    warnAboutPipedSuffix : Boolean!
    removeHyphenatedSuffix : Boolean!
    warnAboutHyphenatedSuffix : Boolean!
}

type ContentSummarySettings {
    useFirstSentenceOfBody : Boolean!
    useFirstSentenceOfBodyIfEmpty : Boolean!
}

type ContentBodySettings {
    allowFrontmatter : Boolean!
    frontMatterPropertyPrefix : String!
}

type ContentSettings {
    title: ContentTitleSettings!
    summary: ContentSummarySettings!
    body: ContentBodySettings!
}

type SettingsBundle {
    name : SettingsBundleName!
    harvester : LinkHarvesterSettings!
    content: ContentSettings!
    httpClient: HTTPClientSettings!
}

interface Link {
    id: ID!
    resource: Resource!
}

interface Content {
    id: ID!
}

interface ContentCollection {
    id: ID!
    source: ContentSource
    content: [Content]
}

scalar ContentTitleText
scalar ContentSummaryText
scalar ContentBodyText

interface Property {
    name: String!
}

type TextProperty implements Property {
    name: String!
    value: String!
}

type FlagProperty implements Property {
    name: String!
    value: Boolean!
}

type MessageProperty implements Property {
    name: String!
    message: String!
}

type NumericProperty implements Property {
    name: String!
    value: Int!
}

type HarvestedLink implements Content & Link {
    id: ID!
    resource: Resource!
    title: ContentTitleText!
    summary: ContentSummaryText!
    body: ContentBodyText!
    properties: [Property!]
}

type APISource implements ContentSource {
    name: NameText!
    apiEndpoint: URLText!
}

type HarvestedLinks implements ContentCollection {
    id: ID!
    source: ContentSource!
    content: [HarvestedLink!]
}

type Query {
    defaultSettingsBundle : SettingsBundle
    settingsBundle(name: SettingsBundleName!) : SettingsBundle
    source(source : URLText!) : ContentSource
    harvestedLinks(source : URLText!, settingsBundle: SettingsBundleName! = "DEFAULT") : HarvestedLinks
}
