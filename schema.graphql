scalar NameText
scalar SmallText
scalar MediumText
scalar LargeText
scalar ExtraLargeText

scalar RegularExpression
scalar WarningMessage
scalar ErrorMessage
scalar Error

scalar URLText
scalar URL
scalar Resource

scalar SettingsBundleName

scalar TimeoutDuration

interface ContentSource {
    name: NameText!
}

type HTTPClientSettings {
    userAgent: String!
    timeout: TimeoutDuration!
} 

type LinkFinalizerSettings {
    ignoreURLsRegExprs : [RegularExpression]
    removeParamsFromURLsRegEx : [RegularExpression]
    followHTMLRedirects : Boolean!
}

type SettingsBundle {
    name : SettingsBundleName!
    linkFinalizer : LinkFinalizerSettings!
    httpClient: HTTPClientSettings!
}

interface Link {
    id: ID!
    url: Resource!
}

interface Content {
    id: ID!
}

interface ContentCollection {
    id: ID!
    source: ContentSource
    content: [Content]
}

scalar ContentTitleText
scalar ContentSummaryText
scalar ContentBodyText

enum ContentTitleOption {
    RemovePipedSuffix
    RemoveHyphenatedSuffix
}

enum ContentSummaryOption {
    UseFirstSentenceOfBodyIfEmpty
}

type HarvestedLink implements Content & Link {
    id: ID!
    title(options: [ContentTitleOption!]): ContentTitleText!
    summary(options: [ContentSummaryOption!]): ContentSummaryText!
    body: ContentBodyText!
    url: Resource!
}

type APISource implements ContentSource {
    name: NameText!
    apiEndpoint: URLText!
}

type HarvestedLinks implements ContentCollection {
    id: ID!
    source: ContentSource!
    content: [HarvestedLink!]
}

type Query {
    defaultSettingsBundle : SettingsBundle
    settingsBundle(name: SettingsBundleName!) : SettingsBundle
    harvestedLinks(feedURL : URLText!, settingsBundle: SettingsBundleName! = "DEFAULT") : HarvestedLinks
}
