scalar SettingsPath
scalar SettingsStoreName
scalar RegularExpression
scalar HTTPClientTimeoutDuration

type SettingsStore {
    name: SettingsStoreName!
}

interface PersistentSettings {
    store: SettingsStore!
}

type HTTPClientSettings implements PersistentSettings {
    store: SettingsStore!
    userAgent: String!
    timeout: HTTPClientTimeoutDuration!
    cacheRepository: RepositoryName!
} 

type LinkScoresLifecycleSettings {
    score: Boolean!
    simulate: Boolean!
}

type LinkLifecyleSettings implements PersistentSettings {
    store: SettingsStore!
    traverseLinks: Boolean!
    scoreLinks: LinkScoresLifecycleSettings!
    ignoreURLsRegExprs: [RegularExpression]
    removeParamsFromURLsRegEx: [RegularExpression]
    followRedirectsInLinkDestinationHTMLContent: Boolean!
    parseMetaDataInLinkDestinationHTMLContent: Boolean!
    downloadLinkDestinationAttachments: Boolean!
}

enum ContentTitleSuffixPolicy {
    Remove
    WarnIfDetected
}

type ContentTitleSettings {
    pipedSuffixPolicy: ContentTitleSuffixPolicy!
    hyphenatedSuffixPolicy: ContentTitleSuffixPolicy!
}

enum ContentSummaryPolicy {
    AlwaysUseFirstSentenceOfContentBody
    UseFirstSentenceOfContentBodyIfEmpty
}

type ContentSummarySettings {
    policy: ContentSummaryPolicy!
}

type ContentBodySettings {
    allowFrontmatter: Boolean!
    frontMatterPropertyNamePrefix: String!
}

type ContentSettings implements PersistentSettings {
    store: SettingsStore!
    title: ContentTitleSettings!
    summary: ContentSummarySettings!
    body: ContentBodySettings!
}

# type SettingsBundle {
#     name: SettingsBundleName!
#     links: LinkLifecyleSettings!
#     content: ContentSettings!
#     httpClient: HTTPClientSettings!
#     observe: ObservationSettings!
#     repositories: Repositories!
# }
