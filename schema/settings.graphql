scalar SettingsPath
scalar SettingsStoreName
scalar RegularExpression

scalar HTTPClientTimeoutDuration
scalar HTTPCacheName

type SettingsStore {
    name: SettingsStoreName!
}

interface PersistentSettings {
    store: SettingsStore!
}

interface HTTPCache {
    name: HTTPCacheName!
    activities: Activities!
}

type HTTPMemoryCache implements HTTPCache {
    name: HTTPCacheName!
    activities: Activities!
}

type HTTPDiskCache implements HTTPCache {
    name: HTTPCacheName!
    activities: Activities!
    basePath: RelativeDirectoryPath!
    createBasePath: Boolean!
}

type HTTPClientSettings implements PersistentSettings {
    store: SettingsStore!
    userAgent: String!
    timeout: HTTPClientTimeoutDuration!
    cache: HTTPCache!
} 

type LinkScoresLifecycleSettings {
    score: Boolean!
    simulate: Boolean!
}

type LinkLifecyleSettings implements PersistentSettings {
    store: SettingsStore!
    traverseLinks: Boolean!
    scoreLinks: LinkScoresLifecycleSettings!
    ignoreURLsRegExprs: [RegularExpression]
    removeParamsFromURLsRegEx: [RegularExpression]
    followRedirectsInLinkDestinationHTMLContent: Boolean!
    parseMetaDataInLinkDestinationHTMLContent: Boolean!
    downloadLinkDestinationAttachments: Boolean!
}

enum ContentTitleSuffixPolicy {
    Remove
    WarnIfDetected
}

type ContentTitleSettings {
    pipedSuffixPolicy: ContentTitleSuffixPolicy!
    hyphenatedSuffixPolicy: ContentTitleSuffixPolicy!
}

enum ContentSummaryPolicy {
    AlwaysUseFirstSentenceOfContentBody
    UseFirstSentenceOfContentBodyIfEmpty
}

type ContentSummarySettings {
    policy: ContentSummaryPolicy!
}

type ContentBodySettings {
    allowFrontmatter: Boolean!
    frontMatterPropertyNamePrefix: String!
}

type ContentSettings implements PersistentSettings {
    store: SettingsStore!
    title: ContentTitleSettings!
    summary: ContentSummarySettings!
    body: ContentBodySettings!
}
