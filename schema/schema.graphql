scalar NameText
scalar SmallText
scalar MediumText
scalar LargeText
scalar ExtraLargeText
scalar InterpolatedMessage

scalar RegularExpression
scalar Error

scalar URLText
scalar URL

scalar SettingsBundleName

scalar TimeoutDuration

scalar Document
scalar File
scalar FileNameOnly
scalar FilePathAndName
scalar DirectoryPath

scalar Date
scalar PastDate
scalar FutureDate
scalar DateTime
scalar PastDateTime
scalar FutureDateTime
scalar Timestamp

type HTTPClientSettings {
    userAgent: String!
    timeout: TimeoutDuration!
} 

type LinkLifecyleSettings {
    ignoreURLsRegExprs : [RegularExpression]
    removeParamsFromURLsRegEx : [RegularExpression]
    followRedirectsInLinkDestinationHTMLContent : Boolean!
    parseMetaDataInLinkDestinationHTMLContent: Boolean!
    downloadLinkDestinationAttachments: Boolean!
}

enum ContentTitleSuffixPolicy {
    Remove
    WarnIfDetected
}

type ContentTitleSettings {
    pipedSuffixPolicy : ContentTitleSuffixPolicy!
    hyphenatedSuffixPolicy: ContentTitleSuffixPolicy!
}

enum ContentSummaryPolicy {
    AlwaysUseFirstSentenceOfContentBody
    UseFirstSentenceOfContentBodyIfEmpty
}

type ContentSummarySettings {
    policy: ContentSummaryPolicy!
}

type ContentBodySettings {
    allowFrontmatter : Boolean!
    frontMatterPropertyNamePrefix : String!
}

type ContentSettings {
    title: ContentTitleSettings!
    summary: ContentSummarySettings!
    body: ContentBodySettings!
}

enum ProgressReporterType {
    Silent
    CommandLineProgressBar
}

type ObservationSettings {
    progressReporterType: ProgressReporterType!
}

type SettingsBundle {
    name : SettingsBundleName!
    links : LinkLifecyleSettings!
    content: ContentSettings!
    httpClient: HTTPClientSettings!
    observe: ObservationSettings!
}

interface Link {
    id: ID!
    originalURLText: URLText!
	finalURL: URL
    isValid: Boolean!
}

interface ContentSource {
    name: NameText!
}

interface APISource {
    apiEndpoint: URLText!
}

interface Content {
    id: ID!
}

interface ContentCollection {
    id: ID!
    source: ContentSource
    content: [Content]
}

scalar ContentTitleText
scalar ContentSummaryText
scalar ContentBodyText

type BookmarkLink implements Link {
    id: ID!
    originalURLText: URLText!
	finalURL: URL
    isValid: Boolean!
}

type Bookmark implements Content {
    id: ID!
    link: BookmarkLink!
    title: ContentTitleText!
    summary: ContentSummaryText!
    body: ContentBodyText!
    properties: Properties
    scores: LinkScores
}

type BookmarksAPISource implements ContentSource & APISource {
    name: NameText!
    apiEndpoint: URLText!
}

type Bookmarks implements ContentCollection {
    id: ID!
    source: BookmarksAPISource!
    content: [Bookmark!]
    activities: Activities!
    properties: Properties
}

type Query {
    defaultSettingsBundle : SettingsBundle
    settingsBundle(name: SettingsBundleName!) : SettingsBundle
    source(source : URLText!) : ContentSource
    bookmarks(source : URLText!, settingsBundle: SettingsBundleName! = "DEFAULT") : Bookmarks
}
