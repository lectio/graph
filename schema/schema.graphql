scalar NameText
scalar SmallText
scalar MediumText
scalar LargeText
scalar ExtraLargeText
scalar InterpolatedMessage

scalar RegularExpression
scalar Error

scalar URLText
scalar URL

scalar SettingsBundleName

scalar TimeoutDuration

scalar Document
scalar File
scalar FileNameOnly
scalar FilePathAndName
scalar DirectoryPath

scalar Date
scalar PastDate
scalar FutureDate
scalar DateTime
scalar PastDateTime
scalar FutureDateTime
scalar Timestamp

type HTTPClientSettings {
    userAgent: String!
    timeout: TimeoutDuration!
} 

enum DuplicatesRetentionPolicy {
    RetainAll
    RetainAllButWarnOnDuplicate
    RetainFirstSkipRemaining
    RetainLastReplacingPrevious
}

enum InvalidLinkPolicy {
    RetainWithError
    RetainWithWarning
    RetainWithoutErrorOrWarning
    SkipWithError
    SkipWithWarning
    SkipWithoutErrorOrWarning
}

type LinkHarvesterSettings {
    ignoreURLsRegExprs : [RegularExpression]
    removeParamsFromURLsRegEx : [RegularExpression]
    skipURLHumanMessageFormat: InterpolatedMessage!
    followRedirectsInLinkDestinationHTMLContent : Boolean!
    parseMetaDataInLinkDestinationHTMLContent: Boolean!
    downloadLinkDestinationAttachments: Boolean!
}

enum ContentTitleSuffixPolicy {
    Remove
    WarnIfDetected
}

type ContentTitleSettings {
    pipedSuffixPolicy : ContentTitleSuffixPolicy!
    hyphenatedSuffixPolicy: ContentTitleSuffixPolicy!
}

enum ContentSummaryPolicy {
    AlwaysUseFirstSentenceOfContentBody
    UseFirstSentenceOfContentBodyIfEmpty
}

type ContentSummarySettings {
    policy: ContentSummaryPolicy!
}

type ContentBodySettings {
    allowFrontmatter : Boolean!
    frontMatterPropertyNamePrefix : String!
}

type ContentSettings {
    title: ContentTitleSettings!
    summary: ContentSummarySettings!
    body: ContentBodySettings!
}

type SettingsBundle {
    name : SettingsBundleName!
    harvester : LinkHarvesterSettings!
    content: ContentSettings!
    httpClient: HTTPClientSettings!
}

# scalar LinkDestinationContentMIMEType
# scalar LinkDestinationContentMediaType
# scalar LinkDestinationHTMLRedirectURLText
# scalar LinkDestinationHTMLParseError
# scalar LinkDestinationMediaTypeError

# scalar LinkAttachmentFileType
# scalar LinkAttachmentDownloadError
# scalar LinkAttachmentFileTypeError

# type LinkAttachment {
# 	url: URL
#     downloaded: Boolean!
# 	destPath: FilePathAndName!
# 	downloadError: LinkAttachmentDownloadError
# 	fileTypeError: LinkAttachmentFileTypeError
# 	fileType: LinkAttachmentFileType!
# }

# enum LinkDestinationValidity {
#     NotValidated
#     Valid
#     Invalid
# }

# type LinkDestination {
#     url: URL
#     validity: LinkDestinationValidity!
#     contentType: LinkDestinationContentMIMEType!
#     mediaType: LinkDestinationContentMediaType!
#     mediaTypeParams: [Property!]
#     mediaTypeError: LinkDestinationMediaTypeError
#     htmlParseError: LinkDestinationHTMLParseError
#     isHTMLRedirect: Boolean
#     metaRefreshTagContentURLText: LinkDestinationHTMLRedirectURLText
#     metaPropertyTags: [Property!]
# }

interface Link {
    id: ID!
    urlText: URLText!
	finalizedURL: URL
    isValid: Boolean!
}

interface ContentSource {
    name: NameText!
}

interface Content {
    id: ID!
}

interface ContentCollection {
    id: ID!
    source: ContentSource
    content: [Content]
}

scalar ContentTitleText
scalar ContentSummaryText
scalar ContentBodyText

type HarvestedLink implements Content & Link {
    id: ID!
    urlText: URLText!
	finalizedURL: URL
    isValid: Boolean!
    title: ContentTitleText!
    summary: ContentSummaryText!
    body: ContentBodyText!
    properties: Properties
	isIgnored: Boolean!
	ignoreReason: InterpolatedMessage
}

type APISource implements ContentSource {
    name: NameText!
    apiEndpoint: URLText!
}

type HarvestedLinks implements ContentCollection {
    id: ID!
    source: ContentSource!
    content: [HarvestedLink!]
    activities: Activities!
    properties: Properties
}

type Query {
    defaultSettingsBundle : SettingsBundle
    settingsBundle(name: SettingsBundleName!) : SettingsBundle
    source(source : URLText!) : ContentSource
    harvestedLinks(source : URLText!, invalidLinks: InvalidLinkPolicy! = SkipWithWarning, duplicateLinks: DuplicatesRetentionPolicy! = RetainAllButWarnOnDuplicate, settingsBundle: SettingsBundleName! = "DEFAULT") : HarvestedLinks
}
