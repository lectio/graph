// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resolve

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/lectio/graph/model"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Activities struct {
		Errors   func(childComplexity int) int
		History  func(childComplexity int) int
		Warnings func(childComplexity int) int
	}

	ActivityError struct {
		Code    func(childComplexity int) int
		Context func(childComplexity int) int
		ID      func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ActivityLog struct {
		Code       func(childComplexity int) int
		Context    func(childComplexity int) int
		ID         func(childComplexity int) int
		Message    func(childComplexity int) int
		Name       func(childComplexity int) int
		Properties func(childComplexity int) int
	}

	ActivityWarning struct {
		Code    func(childComplexity int) int
		Context func(childComplexity int) int
		ID      func(childComplexity int) int
		Message func(childComplexity int) int
	}

	AggregateLinkScorer struct {
		HumanName   func(childComplexity int) int
		MachineName func(childComplexity int) int
	}

	AggregateLinkScores struct {
		CommentsCount func(childComplexity int) int
		IsValid       func(childComplexity int) int
		Scorer        func(childComplexity int) int
		Scores        func(childComplexity int) int
		SharesCount   func(childComplexity int) int
		TargetURL     func(childComplexity int) int
	}

	Bookmark struct {
		Body       func(childComplexity int) int
		ID         func(childComplexity int) int
		Link       func(childComplexity int) int
		Properties func(childComplexity int) int
		Scores     func(childComplexity int) int
		Summary    func(childComplexity int) int
		Taxonomies func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	BookmarkLink struct {
		FinalURL        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsValid         func(childComplexity int) int
		OriginalURLText func(childComplexity int) int
	}

	Bookmarks struct {
		Activities func(childComplexity int) int
		Content    func(childComplexity int) int
		ID         func(childComplexity int) int
		Properties func(childComplexity int) int
		Source     func(childComplexity int) int
	}

	BookmarksAPISource struct {
		APIEndpoint func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	BookmarksToMarkdownPipelineExecution struct {
		Activities  func(childComplexity int) int
		Bookmarks   func(childComplexity int) int
		ExecutionID func(childComplexity int) int
		Pipeline    func(childComplexity int) int
		Settings    func(childComplexity int) int
		Strategy    func(childComplexity int) int
	}

	ContentBodySettings struct {
		AllowFrontmatter              func(childComplexity int) int
		FrontMatterPropertyNamePrefix func(childComplexity int) int
	}

	ContentEditActivity struct {
		Code       func(childComplexity int) int
		Context    func(childComplexity int) int
		ID         func(childComplexity int) int
		Message    func(childComplexity int) int
		Modified   func(childComplexity int) int
		Name       func(childComplexity int) int
		Original   func(childComplexity int) int
		Properties func(childComplexity int) int
	}

	ContentSettings struct {
		Body    func(childComplexity int) int
		Summary func(childComplexity int) int
		Title   func(childComplexity int) int
	}

	ContentSummarySettings struct {
		Policy func(childComplexity int) int
	}

	ContentTitleSettings struct {
		HyphenatedSuffixPolicy func(childComplexity int) int
		PipedSuffixPolicy      func(childComplexity int) int
	}

	DateTimeProperty struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	FacebookLinkScorer struct {
		HumanName   func(childComplexity int) int
		MachineName func(childComplexity int) int
	}

	FacebookLinkScores struct {
		CommentsCount func(childComplexity int) int
		IsValid       func(childComplexity int) int
		Scorer        func(childComplexity int) int
		SharesCount   func(childComplexity int) int
		TargetURL     func(childComplexity int) int
	}

	FileRepository struct {
		CreateRootPath func(childComplexity int) int
		Name           func(childComplexity int) int
		RootPath       func(childComplexity int) int
		URL            func(childComplexity int) int
	}

	FlagProperty struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	FlatTaxonomy struct {
		Name func(childComplexity int) int
		Taxa func(childComplexity int) int
	}

	GitHubRepository struct {
		Name  func(childComplexity int) int
		Token func(childComplexity int) int
		URL   func(childComplexity int) int
	}

	HTTPClientSettings struct {
		Timeout   func(childComplexity int) int
		UserAgent func(childComplexity int) int
	}

	HiearchicalTaxonomy struct {
		Name func(childComplexity int) int
		Taxa func(childComplexity int) int
	}

	LinkLifecyleSettings struct {
		DownloadLinkDestinationAttachments          func(childComplexity int) int
		FollowRedirectsInLinkDestinationHTMLContent func(childComplexity int) int
		IgnoreURLsRegExprs                          func(childComplexity int) int
		ParseMetaDataInLinkDestinationHTMLContent   func(childComplexity int) int
		RemoveParamsFromURLsRegEx                   func(childComplexity int) int
		ScoreLinks                                  func(childComplexity int) int
		TraverseLinks                               func(childComplexity int) int
	}

	LinkScoresLifecycleSettings struct {
		Score    func(childComplexity int) int
		Simulate func(childComplexity int) int
	}

	LinkedInLinkScorer struct {
		HumanName   func(childComplexity int) int
		MachineName func(childComplexity int) int
	}

	LinkedInLinkScores struct {
		CommentsCount func(childComplexity int) int
		IsValid       func(childComplexity int) int
		Scorer        func(childComplexity int) int
		SharesCount   func(childComplexity int) int
		TargetURL     func(childComplexity int) int
	}

	Mutation struct {
		ExecuteBookmarksToMarkdownPipeline func(childComplexity int, input model.BookmarksToMarkdownPipelineInput) int
		ExecutePipeline                    func(childComplexity int, input model.ExecutePipelineInput) int
	}

	NumericProperty struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	ObservationSettings struct {
		ProgressReporterType func(childComplexity int) int
	}

	Properties struct {
		All func(childComplexity int) int
	}

	Query struct {
		Bookmarks             func(childComplexity int, source model.URLText, settingsBundle model.SettingsBundleName) int
		DefaultSettingsBundle func(childComplexity int) int
		SettingsBundle        func(childComplexity int, name model.SettingsBundleName) int
		Source                func(childComplexity int, source model.URLText) int
	}

	Repositories struct {
		All func(childComplexity int) int
	}

	SecretText struct {
		EncryptedText func(childComplexity int) int
		Vault         func(childComplexity int) int
	}

	SettingsBundle struct {
		Content      func(childComplexity int) int
		HTTPClient   func(childComplexity int) int
		Links        func(childComplexity int) int
		Name         func(childComplexity int) int
		Observe      func(childComplexity int) int
		Repositories func(childComplexity int) int
	}

	TaxonNode struct {
		Taxa  func(childComplexity int) int
		Taxon func(childComplexity int) int
	}

	TempFileRepository struct {
		Name   func(childComplexity int) int
		Prefix func(childComplexity int) int
		URL    func(childComplexity int) int
	}

	TextProperty struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}
}

type MutationResolver interface {
	ExecutePipeline(ctx context.Context, input model.ExecutePipelineInput) (model.PipelineExecution, error)
	ExecuteBookmarksToMarkdownPipeline(ctx context.Context, input model.BookmarksToMarkdownPipelineInput) (*model.BookmarksToMarkdownPipelineExecution, error)
}
type QueryResolver interface {
	DefaultSettingsBundle(ctx context.Context) (*model.SettingsBundle, error)
	SettingsBundle(ctx context.Context, name model.SettingsBundleName) (*model.SettingsBundle, error)
	Source(ctx context.Context, source model.URLText) (model.ContentSource, error)
	Bookmarks(ctx context.Context, source model.URLText, settingsBundle model.SettingsBundleName) (*model.Bookmarks, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Activities.Errors":
		if e.complexity.Activities.Errors == nil {
			break
		}

		return e.complexity.Activities.Errors(childComplexity), true

	case "Activities.History":
		if e.complexity.Activities.History == nil {
			break
		}

		return e.complexity.Activities.History(childComplexity), true

	case "Activities.Warnings":
		if e.complexity.Activities.Warnings == nil {
			break
		}

		return e.complexity.Activities.Warnings(childComplexity), true

	case "ActivityError.Code":
		if e.complexity.ActivityError.Code == nil {
			break
		}

		return e.complexity.ActivityError.Code(childComplexity), true

	case "ActivityError.Context":
		if e.complexity.ActivityError.Context == nil {
			break
		}

		return e.complexity.ActivityError.Context(childComplexity), true

	case "ActivityError.ID":
		if e.complexity.ActivityError.ID == nil {
			break
		}

		return e.complexity.ActivityError.ID(childComplexity), true

	case "ActivityError.Message":
		if e.complexity.ActivityError.Message == nil {
			break
		}

		return e.complexity.ActivityError.Message(childComplexity), true

	case "ActivityLog.Code":
		if e.complexity.ActivityLog.Code == nil {
			break
		}

		return e.complexity.ActivityLog.Code(childComplexity), true

	case "ActivityLog.Context":
		if e.complexity.ActivityLog.Context == nil {
			break
		}

		return e.complexity.ActivityLog.Context(childComplexity), true

	case "ActivityLog.ID":
		if e.complexity.ActivityLog.ID == nil {
			break
		}

		return e.complexity.ActivityLog.ID(childComplexity), true

	case "ActivityLog.Message":
		if e.complexity.ActivityLog.Message == nil {
			break
		}

		return e.complexity.ActivityLog.Message(childComplexity), true

	case "ActivityLog.Name":
		if e.complexity.ActivityLog.Name == nil {
			break
		}

		return e.complexity.ActivityLog.Name(childComplexity), true

	case "ActivityLog.Properties":
		if e.complexity.ActivityLog.Properties == nil {
			break
		}

		return e.complexity.ActivityLog.Properties(childComplexity), true

	case "ActivityWarning.Code":
		if e.complexity.ActivityWarning.Code == nil {
			break
		}

		return e.complexity.ActivityWarning.Code(childComplexity), true

	case "ActivityWarning.Context":
		if e.complexity.ActivityWarning.Context == nil {
			break
		}

		return e.complexity.ActivityWarning.Context(childComplexity), true

	case "ActivityWarning.ID":
		if e.complexity.ActivityWarning.ID == nil {
			break
		}

		return e.complexity.ActivityWarning.ID(childComplexity), true

	case "ActivityWarning.Message":
		if e.complexity.ActivityWarning.Message == nil {
			break
		}

		return e.complexity.ActivityWarning.Message(childComplexity), true

	case "AggregateLinkScorer.HumanName":
		if e.complexity.AggregateLinkScorer.HumanName == nil {
			break
		}

		return e.complexity.AggregateLinkScorer.HumanName(childComplexity), true

	case "AggregateLinkScorer.MachineName":
		if e.complexity.AggregateLinkScorer.MachineName == nil {
			break
		}

		return e.complexity.AggregateLinkScorer.MachineName(childComplexity), true

	case "AggregateLinkScores.CommentsCount":
		if e.complexity.AggregateLinkScores.CommentsCount == nil {
			break
		}

		return e.complexity.AggregateLinkScores.CommentsCount(childComplexity), true

	case "AggregateLinkScores.IsValid":
		if e.complexity.AggregateLinkScores.IsValid == nil {
			break
		}

		return e.complexity.AggregateLinkScores.IsValid(childComplexity), true

	case "AggregateLinkScores.Scorer":
		if e.complexity.AggregateLinkScores.Scorer == nil {
			break
		}

		return e.complexity.AggregateLinkScores.Scorer(childComplexity), true

	case "AggregateLinkScores.Scores":
		if e.complexity.AggregateLinkScores.Scores == nil {
			break
		}

		return e.complexity.AggregateLinkScores.Scores(childComplexity), true

	case "AggregateLinkScores.SharesCount":
		if e.complexity.AggregateLinkScores.SharesCount == nil {
			break
		}

		return e.complexity.AggregateLinkScores.SharesCount(childComplexity), true

	case "AggregateLinkScores.TargetURL":
		if e.complexity.AggregateLinkScores.TargetURL == nil {
			break
		}

		return e.complexity.AggregateLinkScores.TargetURL(childComplexity), true

	case "Bookmark.Body":
		if e.complexity.Bookmark.Body == nil {
			break
		}

		return e.complexity.Bookmark.Body(childComplexity), true

	case "Bookmark.ID":
		if e.complexity.Bookmark.ID == nil {
			break
		}

		return e.complexity.Bookmark.ID(childComplexity), true

	case "Bookmark.Link":
		if e.complexity.Bookmark.Link == nil {
			break
		}

		return e.complexity.Bookmark.Link(childComplexity), true

	case "Bookmark.Properties":
		if e.complexity.Bookmark.Properties == nil {
			break
		}

		return e.complexity.Bookmark.Properties(childComplexity), true

	case "Bookmark.Scores":
		if e.complexity.Bookmark.Scores == nil {
			break
		}

		return e.complexity.Bookmark.Scores(childComplexity), true

	case "Bookmark.Summary":
		if e.complexity.Bookmark.Summary == nil {
			break
		}

		return e.complexity.Bookmark.Summary(childComplexity), true

	case "Bookmark.Taxonomies":
		if e.complexity.Bookmark.Taxonomies == nil {
			break
		}

		return e.complexity.Bookmark.Taxonomies(childComplexity), true

	case "Bookmark.Title":
		if e.complexity.Bookmark.Title == nil {
			break
		}

		return e.complexity.Bookmark.Title(childComplexity), true

	case "BookmarkLink.FinalURL":
		if e.complexity.BookmarkLink.FinalURL == nil {
			break
		}

		return e.complexity.BookmarkLink.FinalURL(childComplexity), true

	case "BookmarkLink.ID":
		if e.complexity.BookmarkLink.ID == nil {
			break
		}

		return e.complexity.BookmarkLink.ID(childComplexity), true

	case "BookmarkLink.IsValid":
		if e.complexity.BookmarkLink.IsValid == nil {
			break
		}

		return e.complexity.BookmarkLink.IsValid(childComplexity), true

	case "BookmarkLink.OriginalURLText":
		if e.complexity.BookmarkLink.OriginalURLText == nil {
			break
		}

		return e.complexity.BookmarkLink.OriginalURLText(childComplexity), true

	case "Bookmarks.Activities":
		if e.complexity.Bookmarks.Activities == nil {
			break
		}

		return e.complexity.Bookmarks.Activities(childComplexity), true

	case "Bookmarks.Content":
		if e.complexity.Bookmarks.Content == nil {
			break
		}

		return e.complexity.Bookmarks.Content(childComplexity), true

	case "Bookmarks.ID":
		if e.complexity.Bookmarks.ID == nil {
			break
		}

		return e.complexity.Bookmarks.ID(childComplexity), true

	case "Bookmarks.Properties":
		if e.complexity.Bookmarks.Properties == nil {
			break
		}

		return e.complexity.Bookmarks.Properties(childComplexity), true

	case "Bookmarks.Source":
		if e.complexity.Bookmarks.Source == nil {
			break
		}

		return e.complexity.Bookmarks.Source(childComplexity), true

	case "BookmarksAPISource.APIEndpoint":
		if e.complexity.BookmarksAPISource.APIEndpoint == nil {
			break
		}

		return e.complexity.BookmarksAPISource.APIEndpoint(childComplexity), true

	case "BookmarksAPISource.Name":
		if e.complexity.BookmarksAPISource.Name == nil {
			break
		}

		return e.complexity.BookmarksAPISource.Name(childComplexity), true

	case "BookmarksToMarkdownPipelineExecution.Activities":
		if e.complexity.BookmarksToMarkdownPipelineExecution.Activities == nil {
			break
		}

		return e.complexity.BookmarksToMarkdownPipelineExecution.Activities(childComplexity), true

	case "BookmarksToMarkdownPipelineExecution.Bookmarks":
		if e.complexity.BookmarksToMarkdownPipelineExecution.Bookmarks == nil {
			break
		}

		return e.complexity.BookmarksToMarkdownPipelineExecution.Bookmarks(childComplexity), true

	case "BookmarksToMarkdownPipelineExecution.ExecutionID":
		if e.complexity.BookmarksToMarkdownPipelineExecution.ExecutionID == nil {
			break
		}

		return e.complexity.BookmarksToMarkdownPipelineExecution.ExecutionID(childComplexity), true

	case "BookmarksToMarkdownPipelineExecution.Pipeline":
		if e.complexity.BookmarksToMarkdownPipelineExecution.Pipeline == nil {
			break
		}

		return e.complexity.BookmarksToMarkdownPipelineExecution.Pipeline(childComplexity), true

	case "BookmarksToMarkdownPipelineExecution.Settings":
		if e.complexity.BookmarksToMarkdownPipelineExecution.Settings == nil {
			break
		}

		return e.complexity.BookmarksToMarkdownPipelineExecution.Settings(childComplexity), true

	case "BookmarksToMarkdownPipelineExecution.Strategy":
		if e.complexity.BookmarksToMarkdownPipelineExecution.Strategy == nil {
			break
		}

		return e.complexity.BookmarksToMarkdownPipelineExecution.Strategy(childComplexity), true

	case "ContentBodySettings.AllowFrontmatter":
		if e.complexity.ContentBodySettings.AllowFrontmatter == nil {
			break
		}

		return e.complexity.ContentBodySettings.AllowFrontmatter(childComplexity), true

	case "ContentBodySettings.FrontMatterPropertyNamePrefix":
		if e.complexity.ContentBodySettings.FrontMatterPropertyNamePrefix == nil {
			break
		}

		return e.complexity.ContentBodySettings.FrontMatterPropertyNamePrefix(childComplexity), true

	case "ContentEditActivity.Code":
		if e.complexity.ContentEditActivity.Code == nil {
			break
		}

		return e.complexity.ContentEditActivity.Code(childComplexity), true

	case "ContentEditActivity.Context":
		if e.complexity.ContentEditActivity.Context == nil {
			break
		}

		return e.complexity.ContentEditActivity.Context(childComplexity), true

	case "ContentEditActivity.ID":
		if e.complexity.ContentEditActivity.ID == nil {
			break
		}

		return e.complexity.ContentEditActivity.ID(childComplexity), true

	case "ContentEditActivity.Message":
		if e.complexity.ContentEditActivity.Message == nil {
			break
		}

		return e.complexity.ContentEditActivity.Message(childComplexity), true

	case "ContentEditActivity.Modified":
		if e.complexity.ContentEditActivity.Modified == nil {
			break
		}

		return e.complexity.ContentEditActivity.Modified(childComplexity), true

	case "ContentEditActivity.Name":
		if e.complexity.ContentEditActivity.Name == nil {
			break
		}

		return e.complexity.ContentEditActivity.Name(childComplexity), true

	case "ContentEditActivity.Original":
		if e.complexity.ContentEditActivity.Original == nil {
			break
		}

		return e.complexity.ContentEditActivity.Original(childComplexity), true

	case "ContentEditActivity.Properties":
		if e.complexity.ContentEditActivity.Properties == nil {
			break
		}

		return e.complexity.ContentEditActivity.Properties(childComplexity), true

	case "ContentSettings.Body":
		if e.complexity.ContentSettings.Body == nil {
			break
		}

		return e.complexity.ContentSettings.Body(childComplexity), true

	case "ContentSettings.Summary":
		if e.complexity.ContentSettings.Summary == nil {
			break
		}

		return e.complexity.ContentSettings.Summary(childComplexity), true

	case "ContentSettings.Title":
		if e.complexity.ContentSettings.Title == nil {
			break
		}

		return e.complexity.ContentSettings.Title(childComplexity), true

	case "ContentSummarySettings.Policy":
		if e.complexity.ContentSummarySettings.Policy == nil {
			break
		}

		return e.complexity.ContentSummarySettings.Policy(childComplexity), true

	case "ContentTitleSettings.HyphenatedSuffixPolicy":
		if e.complexity.ContentTitleSettings.HyphenatedSuffixPolicy == nil {
			break
		}

		return e.complexity.ContentTitleSettings.HyphenatedSuffixPolicy(childComplexity), true

	case "ContentTitleSettings.PipedSuffixPolicy":
		if e.complexity.ContentTitleSettings.PipedSuffixPolicy == nil {
			break
		}

		return e.complexity.ContentTitleSettings.PipedSuffixPolicy(childComplexity), true

	case "DateTimeProperty.Name":
		if e.complexity.DateTimeProperty.Name == nil {
			break
		}

		return e.complexity.DateTimeProperty.Name(childComplexity), true

	case "DateTimeProperty.Value":
		if e.complexity.DateTimeProperty.Value == nil {
			break
		}

		return e.complexity.DateTimeProperty.Value(childComplexity), true

	case "FacebookLinkScorer.HumanName":
		if e.complexity.FacebookLinkScorer.HumanName == nil {
			break
		}

		return e.complexity.FacebookLinkScorer.HumanName(childComplexity), true

	case "FacebookLinkScorer.MachineName":
		if e.complexity.FacebookLinkScorer.MachineName == nil {
			break
		}

		return e.complexity.FacebookLinkScorer.MachineName(childComplexity), true

	case "FacebookLinkScores.CommentsCount":
		if e.complexity.FacebookLinkScores.CommentsCount == nil {
			break
		}

		return e.complexity.FacebookLinkScores.CommentsCount(childComplexity), true

	case "FacebookLinkScores.IsValid":
		if e.complexity.FacebookLinkScores.IsValid == nil {
			break
		}

		return e.complexity.FacebookLinkScores.IsValid(childComplexity), true

	case "FacebookLinkScores.Scorer":
		if e.complexity.FacebookLinkScores.Scorer == nil {
			break
		}

		return e.complexity.FacebookLinkScores.Scorer(childComplexity), true

	case "FacebookLinkScores.SharesCount":
		if e.complexity.FacebookLinkScores.SharesCount == nil {
			break
		}

		return e.complexity.FacebookLinkScores.SharesCount(childComplexity), true

	case "FacebookLinkScores.TargetURL":
		if e.complexity.FacebookLinkScores.TargetURL == nil {
			break
		}

		return e.complexity.FacebookLinkScores.TargetURL(childComplexity), true

	case "FileRepository.CreateRootPath":
		if e.complexity.FileRepository.CreateRootPath == nil {
			break
		}

		return e.complexity.FileRepository.CreateRootPath(childComplexity), true

	case "FileRepository.Name":
		if e.complexity.FileRepository.Name == nil {
			break
		}

		return e.complexity.FileRepository.Name(childComplexity), true

	case "FileRepository.RootPath":
		if e.complexity.FileRepository.RootPath == nil {
			break
		}

		return e.complexity.FileRepository.RootPath(childComplexity), true

	case "FileRepository.URL":
		if e.complexity.FileRepository.URL == nil {
			break
		}

		return e.complexity.FileRepository.URL(childComplexity), true

	case "FlagProperty.Name":
		if e.complexity.FlagProperty.Name == nil {
			break
		}

		return e.complexity.FlagProperty.Name(childComplexity), true

	case "FlagProperty.Value":
		if e.complexity.FlagProperty.Value == nil {
			break
		}

		return e.complexity.FlagProperty.Value(childComplexity), true

	case "FlatTaxonomy.Name":
		if e.complexity.FlatTaxonomy.Name == nil {
			break
		}

		return e.complexity.FlatTaxonomy.Name(childComplexity), true

	case "FlatTaxonomy.Taxa":
		if e.complexity.FlatTaxonomy.Taxa == nil {
			break
		}

		return e.complexity.FlatTaxonomy.Taxa(childComplexity), true

	case "GitHubRepository.Name":
		if e.complexity.GitHubRepository.Name == nil {
			break
		}

		return e.complexity.GitHubRepository.Name(childComplexity), true

	case "GitHubRepository.Token":
		if e.complexity.GitHubRepository.Token == nil {
			break
		}

		return e.complexity.GitHubRepository.Token(childComplexity), true

	case "GitHubRepository.URL":
		if e.complexity.GitHubRepository.URL == nil {
			break
		}

		return e.complexity.GitHubRepository.URL(childComplexity), true

	case "HTTPClientSettings.Timeout":
		if e.complexity.HTTPClientSettings.Timeout == nil {
			break
		}

		return e.complexity.HTTPClientSettings.Timeout(childComplexity), true

	case "HTTPClientSettings.UserAgent":
		if e.complexity.HTTPClientSettings.UserAgent == nil {
			break
		}

		return e.complexity.HTTPClientSettings.UserAgent(childComplexity), true

	case "HiearchicalTaxonomy.Name":
		if e.complexity.HiearchicalTaxonomy.Name == nil {
			break
		}

		return e.complexity.HiearchicalTaxonomy.Name(childComplexity), true

	case "HiearchicalTaxonomy.Taxa":
		if e.complexity.HiearchicalTaxonomy.Taxa == nil {
			break
		}

		return e.complexity.HiearchicalTaxonomy.Taxa(childComplexity), true

	case "LinkLifecyleSettings.DownloadLinkDestinationAttachments":
		if e.complexity.LinkLifecyleSettings.DownloadLinkDestinationAttachments == nil {
			break
		}

		return e.complexity.LinkLifecyleSettings.DownloadLinkDestinationAttachments(childComplexity), true

	case "LinkLifecyleSettings.FollowRedirectsInLinkDestinationHTMLContent":
		if e.complexity.LinkLifecyleSettings.FollowRedirectsInLinkDestinationHTMLContent == nil {
			break
		}

		return e.complexity.LinkLifecyleSettings.FollowRedirectsInLinkDestinationHTMLContent(childComplexity), true

	case "LinkLifecyleSettings.IgnoreURLsRegExprs":
		if e.complexity.LinkLifecyleSettings.IgnoreURLsRegExprs == nil {
			break
		}

		return e.complexity.LinkLifecyleSettings.IgnoreURLsRegExprs(childComplexity), true

	case "LinkLifecyleSettings.ParseMetaDataInLinkDestinationHTMLContent":
		if e.complexity.LinkLifecyleSettings.ParseMetaDataInLinkDestinationHTMLContent == nil {
			break
		}

		return e.complexity.LinkLifecyleSettings.ParseMetaDataInLinkDestinationHTMLContent(childComplexity), true

	case "LinkLifecyleSettings.RemoveParamsFromURLsRegEx":
		if e.complexity.LinkLifecyleSettings.RemoveParamsFromURLsRegEx == nil {
			break
		}

		return e.complexity.LinkLifecyleSettings.RemoveParamsFromURLsRegEx(childComplexity), true

	case "LinkLifecyleSettings.ScoreLinks":
		if e.complexity.LinkLifecyleSettings.ScoreLinks == nil {
			break
		}

		return e.complexity.LinkLifecyleSettings.ScoreLinks(childComplexity), true

	case "LinkLifecyleSettings.TraverseLinks":
		if e.complexity.LinkLifecyleSettings.TraverseLinks == nil {
			break
		}

		return e.complexity.LinkLifecyleSettings.TraverseLinks(childComplexity), true

	case "LinkScoresLifecycleSettings.Score":
		if e.complexity.LinkScoresLifecycleSettings.Score == nil {
			break
		}

		return e.complexity.LinkScoresLifecycleSettings.Score(childComplexity), true

	case "LinkScoresLifecycleSettings.Simulate":
		if e.complexity.LinkScoresLifecycleSettings.Simulate == nil {
			break
		}

		return e.complexity.LinkScoresLifecycleSettings.Simulate(childComplexity), true

	case "LinkedInLinkScorer.HumanName":
		if e.complexity.LinkedInLinkScorer.HumanName == nil {
			break
		}

		return e.complexity.LinkedInLinkScorer.HumanName(childComplexity), true

	case "LinkedInLinkScorer.MachineName":
		if e.complexity.LinkedInLinkScorer.MachineName == nil {
			break
		}

		return e.complexity.LinkedInLinkScorer.MachineName(childComplexity), true

	case "LinkedInLinkScores.CommentsCount":
		if e.complexity.LinkedInLinkScores.CommentsCount == nil {
			break
		}

		return e.complexity.LinkedInLinkScores.CommentsCount(childComplexity), true

	case "LinkedInLinkScores.IsValid":
		if e.complexity.LinkedInLinkScores.IsValid == nil {
			break
		}

		return e.complexity.LinkedInLinkScores.IsValid(childComplexity), true

	case "LinkedInLinkScores.Scorer":
		if e.complexity.LinkedInLinkScores.Scorer == nil {
			break
		}

		return e.complexity.LinkedInLinkScores.Scorer(childComplexity), true

	case "LinkedInLinkScores.SharesCount":
		if e.complexity.LinkedInLinkScores.SharesCount == nil {
			break
		}

		return e.complexity.LinkedInLinkScores.SharesCount(childComplexity), true

	case "LinkedInLinkScores.TargetURL":
		if e.complexity.LinkedInLinkScores.TargetURL == nil {
			break
		}

		return e.complexity.LinkedInLinkScores.TargetURL(childComplexity), true

	case "Mutation.ExecuteBookmarksToMarkdownPipeline":
		if e.complexity.Mutation.ExecuteBookmarksToMarkdownPipeline == nil {
			break
		}

		args, err := ec.field_Mutation_executeBookmarksToMarkdownPipeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ExecuteBookmarksToMarkdownPipeline(childComplexity, args["input"].(model.BookmarksToMarkdownPipelineInput)), true

	case "Mutation.ExecutePipeline":
		if e.complexity.Mutation.ExecutePipeline == nil {
			break
		}

		args, err := ec.field_Mutation_executePipeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ExecutePipeline(childComplexity, args["input"].(model.ExecutePipelineInput)), true

	case "NumericProperty.Name":
		if e.complexity.NumericProperty.Name == nil {
			break
		}

		return e.complexity.NumericProperty.Name(childComplexity), true

	case "NumericProperty.Value":
		if e.complexity.NumericProperty.Value == nil {
			break
		}

		return e.complexity.NumericProperty.Value(childComplexity), true

	case "ObservationSettings.ProgressReporterType":
		if e.complexity.ObservationSettings.ProgressReporterType == nil {
			break
		}

		return e.complexity.ObservationSettings.ProgressReporterType(childComplexity), true

	case "Properties.All":
		if e.complexity.Properties.All == nil {
			break
		}

		return e.complexity.Properties.All(childComplexity), true

	case "Query.Bookmarks":
		if e.complexity.Query.Bookmarks == nil {
			break
		}

		args, err := ec.field_Query_bookmarks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Bookmarks(childComplexity, args["source"].(model.URLText), args["settingsBundle"].(model.SettingsBundleName)), true

	case "Query.DefaultSettingsBundle":
		if e.complexity.Query.DefaultSettingsBundle == nil {
			break
		}

		return e.complexity.Query.DefaultSettingsBundle(childComplexity), true

	case "Query.SettingsBundle":
		if e.complexity.Query.SettingsBundle == nil {
			break
		}

		args, err := ec.field_Query_settingsBundle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SettingsBundle(childComplexity, args["name"].(model.SettingsBundleName)), true

	case "Query.Source":
		if e.complexity.Query.Source == nil {
			break
		}

		args, err := ec.field_Query_source_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Source(childComplexity, args["source"].(model.URLText)), true

	case "Repositories.All":
		if e.complexity.Repositories.All == nil {
			break
		}

		return e.complexity.Repositories.All(childComplexity), true

	case "SecretText.EncryptedText":
		if e.complexity.SecretText.EncryptedText == nil {
			break
		}

		return e.complexity.SecretText.EncryptedText(childComplexity), true

	case "SecretText.Vault":
		if e.complexity.SecretText.Vault == nil {
			break
		}

		return e.complexity.SecretText.Vault(childComplexity), true

	case "SettingsBundle.Content":
		if e.complexity.SettingsBundle.Content == nil {
			break
		}

		return e.complexity.SettingsBundle.Content(childComplexity), true

	case "SettingsBundle.HTTPClient":
		if e.complexity.SettingsBundle.HTTPClient == nil {
			break
		}

		return e.complexity.SettingsBundle.HTTPClient(childComplexity), true

	case "SettingsBundle.Links":
		if e.complexity.SettingsBundle.Links == nil {
			break
		}

		return e.complexity.SettingsBundle.Links(childComplexity), true

	case "SettingsBundle.Name":
		if e.complexity.SettingsBundle.Name == nil {
			break
		}

		return e.complexity.SettingsBundle.Name(childComplexity), true

	case "SettingsBundle.Observe":
		if e.complexity.SettingsBundle.Observe == nil {
			break
		}

		return e.complexity.SettingsBundle.Observe(childComplexity), true

	case "SettingsBundle.Repositories":
		if e.complexity.SettingsBundle.Repositories == nil {
			break
		}

		return e.complexity.SettingsBundle.Repositories(childComplexity), true

	case "TaxonNode.Taxa":
		if e.complexity.TaxonNode.Taxa == nil {
			break
		}

		return e.complexity.TaxonNode.Taxa(childComplexity), true

	case "TaxonNode.Taxon":
		if e.complexity.TaxonNode.Taxon == nil {
			break
		}

		return e.complexity.TaxonNode.Taxon(childComplexity), true

	case "TempFileRepository.Name":
		if e.complexity.TempFileRepository.Name == nil {
			break
		}

		return e.complexity.TempFileRepository.Name(childComplexity), true

	case "TempFileRepository.Prefix":
		if e.complexity.TempFileRepository.Prefix == nil {
			break
		}

		return e.complexity.TempFileRepository.Prefix(childComplexity), true

	case "TempFileRepository.URL":
		if e.complexity.TempFileRepository.URL == nil {
			break
		}

		return e.complexity.TempFileRepository.URL(childComplexity), true

	case "TextProperty.Name":
		if e.complexity.TextProperty.Name == nil {
			break
		}

		return e.complexity.TextProperty.Name(childComplexity), true

	case "TextProperty.Value":
		if e.complexity.TextProperty.Value == nil {
			break
		}

		return e.complexity.TextProperty.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema/activity.graphql", Input: `scalar ActivityContext
scalar ActivityCode
scalar ActivityHumanMessage
scalar ActivityMachineMessage

type ActivityError {
    id: ID!
    context: ActivityContext!
    code: ActivityCode!
    message: ActivityHumanMessage!
}

type ActivityWarning {
    id: ID!
    context: ActivityContext!
    code: ActivityCode!
    message: ActivityHumanMessage!
}

interface Activity {
    id: ID!
    context: ActivityContext!
    code: ActivityCode!
    name: ActivityMachineMessage!
    message: ActivityHumanMessage!
    properties: [Property!]
}

type ActivityLog implements Activity {
    id: ID!
    context: ActivityContext!
    code: ActivityCode!
    name: ActivityMachineMessage!
    message: ActivityHumanMessage!
    properties: [Property!]
}

type ContentEditActivity implements Activity {
    id: ID!
    context: ActivityContext!
    code: ActivityCode!
    name: ActivityMachineMessage!
    message: ActivityHumanMessage!
    properties: [Property!]
    original: String!
    modified: String!
}

type Activities {
    history: [Activity!]
    errors: [ActivityError!]
    warnings: [ActivityWarning!]
}
`},
	&ast.Source{Name: "schema/datetime.graphql", Input: `scalar Date
scalar PastDate
scalar FutureDate
scalar DateTime
scalar PastDateTime
scalar FutureDateTime
scalar Timestamp
`},
	&ast.Source{Name: "schema/pipeline.graphql", Input: `scalar PipelineExecutionID
scalar PipelineParamName
scalar PipelineURL

input PipelineParamInput {
    name: PipelineParamName!
    value: String!
}

enum PipelineExecutionStrategy {
    Asynchronous
    Synchronous
}

input ExecutePipelineInput {
    pipeline: PipelineURL!
    strategy: PipelineExecutionStrategy! = Asynchronous
    settingsBundle: SettingsBundleName! = "DEFAULT"
    params: [PipelineParamInput!]
}

interface PipelineExecution {
    pipeline: PipelineURL!
    strategy: PipelineExecutionStrategy!
    executionID: PipelineExecutionID!
    settings: SettingsBundle
    activities: Activities!
}

enum MarkdownFlavor {
    HugoContent
}

input BookmarksToMarkdownPipelineInput {
    strategy: PipelineExecutionStrategy! = Asynchronous
    bookmarksURL: URLText!
    settingsBundle: SettingsBundleName! = "DEFAULT"
    repository: RepositoryName! = "TEMP"
    flavor: MarkdownFlavor! = HugoContent
    cancelOnWriteErrors: Int! = 10
    contentPathRel: String! = "content/post"
    imagesCachePathRel: String! = "static/img/content/post"
    imagesCacheRootURL: URLText! = "/img/content/post"
}

type BookmarksToMarkdownPipelineExecution implements PipelineExecution {
    pipeline: PipelineURL!
    strategy: PipelineExecutionStrategy!
    executionID: PipelineExecutionID!
    settings: SettingsBundle
    bookmarks: Bookmarks
    activities: Activities!
}`},
	&ast.Source{Name: "schema/property.graphql", Input: `scalar PropertyName

interface Property {
    name: PropertyName!
}

type Properties {
    all: [Property!]
}

type TextProperty implements Property {
    name: PropertyName!
    value: String!
}

type DateTimeProperty implements Property {
    name: PropertyName!
    value: DateTime!
}

type FlagProperty implements Property {
    name: PropertyName!
    value: Boolean!
}

type NumericProperty implements Property {
    name: PropertyName!
    value: Int!
}

`},
	&ast.Source{Name: "schema/repository.graphql", Input: `scalar RepositoryName
scalar RepositoryURL
scalar FileMode

interface Repository {
    name: RepositoryName!
    url: RepositoryURL!
}

type Repositories {
    all: [Repository!]
}

scalar FileRepositoryPath
scalar TempFileRepositoryPrefix

type FileRepository implements Repository {
    name: RepositoryName!
    url: RepositoryURL!
    rootPath: FileRepositoryPath!
    createRootPath: Boolean!
}

type TempFileRepository implements Repository {
    name: RepositoryName!
    url: RepositoryURL!
    prefix: TempFileRepositoryPrefix!
}

type GitHubRepository implements Repository {
    name: RepositoryName!
    url: RepositoryURL!
    token: SecretText!
}
`},
	&ast.Source{Name: "schema/schema.graphql", Input: `scalar NameText
scalar SmallText
scalar MediumText
scalar LargeText
scalar ExtraLargeText
scalar InterpolatedMessage

scalar Error

scalar URLText
scalar URL

scalar Document
scalar File
scalar FileNameOnly
scalar FilePathAndName
scalar DirectoryPath

interface Link {
    id: ID!
    originalURLText: URLText!
	finalURL: URL
    isValid: Boolean!
}

interface ContentSource {
    name: NameText!
}

interface APISource {
    apiEndpoint: URLText!
}

interface Content {
    id: ID!
}

interface ContentCollection {
    id: ID!
    source: ContentSource
    content: [Content]
}

scalar ContentTitleText
scalar ContentSummaryText
scalar ContentBodyText

type BookmarkLink implements Link {
    id: ID!
    originalURLText: URLText!
	finalURL: URL
    isValid: Boolean!
}

type Bookmark implements Content {
    id: ID!
    link: BookmarkLink!
    title: ContentTitleText!
    summary: ContentSummaryText!
    body: ContentBodyText!
    taxonomies: [Taxonomy!]!
    properties: Properties
    scores: LinkScores
}

type BookmarksAPISource implements ContentSource & APISource {
    name: NameText!
    apiEndpoint: URLText!
}

type Bookmarks implements ContentCollection {
    id: ID!
    source: BookmarksAPISource!
    content: [Bookmark!]
    activities: Activities!
    properties: Properties
}

type Query {
    defaultSettingsBundle : SettingsBundle
    settingsBundle(name: SettingsBundleName!) : SettingsBundle
    source(source : URLText!) : ContentSource
    bookmarks(source : URLText!, settingsBundle: SettingsBundleName! = "DEFAULT") : Bookmarks
}

type Mutation {
    executePipeline(input: ExecutePipelineInput!): PipelineExecution!
    executeBookmarksToMarkdownPipeline(input: BookmarksToMarkdownPipelineInput!): BookmarksToMarkdownPipelineExecution!
}`},
	&ast.Source{Name: "schema/score.graphql", Input: `scalar LinkScorerMachineName
scalar LinkScorerHumanName

interface LinkScorer {
    machineName: LinkScorerMachineName!
    humanName: LinkScorerHumanName!
}

interface LinkScores {
    scorer: LinkScorer!
    isValid: Boolean!
    targetURL: URLText!
    sharesCount: Int!
    commentsCount: Int!
}

type AggregateLinkScorer implements LinkScorer {
    machineName: LinkScorerMachineName!
    humanName: LinkScorerHumanName!
}

type FacebookLinkScorer implements LinkScorer {
    machineName: LinkScorerMachineName!
    humanName: LinkScorerHumanName!
}

type LinkedInLinkScorer implements LinkScorer {
    machineName: LinkScorerMachineName!
    humanName: LinkScorerHumanName!
}

type AggregateLinkScores implements LinkScores {
    scorer: LinkScorer!
    scores: [LinkScores!]!
    isValid: Boolean!
    targetURL: URLText!
    sharesCount: Int!
    commentsCount: Int!
}

type FacebookLinkScores implements LinkScores {
    scorer: LinkScorer!
    isValid: Boolean!
    targetURL: URLText!
    sharesCount: Int!
    commentsCount: Int!
}

type LinkedInLinkScores implements LinkScores {
    scorer: LinkScorer!
    isValid: Boolean!
    targetURL: URLText!
    sharesCount: Int!
    commentsCount: Int!
}
`},
	&ast.Source{Name: "schema/secrets.graphql", Input: `scalar SecretsVault

interface SecretValue {
    vault: SecretsVault!
}

type SecretText implements SecretValue {
    vault: SecretsVault!
    encryptedText: String!
}
`},
	&ast.Source{Name: "schema/settings.graphql", Input: `scalar SettingsBundleName
scalar RegularExpression
scalar HTTPClientTimeoutDuration

type HTTPClientSettings {
    userAgent: String!
    timeout: HTTPClientTimeoutDuration!
} 

type LinkScoresLifecycleSettings {
    score: Boolean!
    simulate: Boolean!
}

type LinkLifecyleSettings {
    traverseLinks: Boolean!
    scoreLinks: LinkScoresLifecycleSettings!
    ignoreURLsRegExprs: [RegularExpression]
    removeParamsFromURLsRegEx: [RegularExpression]
    followRedirectsInLinkDestinationHTMLContent: Boolean!
    parseMetaDataInLinkDestinationHTMLContent: Boolean!
    downloadLinkDestinationAttachments: Boolean!
}

enum ContentTitleSuffixPolicy {
    Remove
    WarnIfDetected
}

type ContentTitleSettings {
    pipedSuffixPolicy: ContentTitleSuffixPolicy!
    hyphenatedSuffixPolicy: ContentTitleSuffixPolicy!
}

enum ContentSummaryPolicy {
    AlwaysUseFirstSentenceOfContentBody
    UseFirstSentenceOfContentBodyIfEmpty
}

type ContentSummarySettings {
    policy: ContentSummaryPolicy!
}

type ContentBodySettings {
    allowFrontmatter: Boolean!
    frontMatterPropertyNamePrefix: String!
}

type ContentSettings {
    title: ContentTitleSettings!
    summary: ContentSummarySettings!
    body: ContentBodySettings!
}

enum ProgressReporterType {
    Silent
    CommandLineProgressBar
}

type ObservationSettings {
    progressReporterType: ProgressReporterType!
}

type SettingsBundle {
    name: SettingsBundleName!
    links: LinkLifecyleSettings!
    content: ContentSettings!
    httpClient: HTTPClientSettings!
    observe: ObservationSettings!
    repositories: Repositories!
}
`},
	&ast.Source{Name: "schema/taxonomy.graphql", Input: `scalar TaxonomyName
scalar TaxonName  # Taxonomy uses taxonomic units, known as taxa (singular taxon).

interface Taxonomy {
    name: TaxonomyName!
}

type FlatTaxonomy implements Taxonomy {
    name: TaxonomyName!
    taxa: [TaxonName!]!
}

type TaxonNode {
    taxon: TaxonName
    taxa: [TaxonNode!]!
}

type HiearchicalTaxonomy implements Taxonomy {
    name: TaxonomyName!
    taxa: [TaxonNode!]!
}

`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_executeBookmarksToMarkdownPipeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BookmarksToMarkdownPipelineInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBookmarksToMarkdownPipelineInput2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarksToMarkdownPipelineInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_executePipeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ExecutePipelineInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNExecutePipelineInput2githubᚗcomᚋlectioᚋgraphᚋmodelᚐExecutePipelineInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_bookmarks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.URLText
	if tmp, ok := rawArgs["source"]; ok {
		arg0, err = ec.unmarshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg0
	var arg1 model.SettingsBundleName
	if tmp, ok := rawArgs["settingsBundle"]; ok {
		arg1, err = ec.unmarshalNSettingsBundleName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundleName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["settingsBundle"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_settingsBundle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SettingsBundleName
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNSettingsBundleName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundleName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_source_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.URLText
	if tmp, ok := rawArgs["source"]; ok {
		arg0, err = ec.unmarshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Activities_history(ctx context.Context, field graphql.CollectedField, obj *model.Activities) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Activities",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Activity)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOActivity2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _Activities_errors(ctx context.Context, field graphql.CollectedField, obj *model.Activities) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Activities",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ActivityError)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOActivityError2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityError(ctx, field.Selections, res)
}

func (ec *executionContext) _Activities_warnings(ctx context.Context, field graphql.CollectedField, obj *model.Activities) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Activities",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ActivityWarning)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOActivityWarning2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityWarning(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityError_id(ctx context.Context, field graphql.CollectedField, obj *model.ActivityError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityError_context(ctx context.Context, field graphql.CollectedField, obj *model.ActivityError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityContext)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityContext2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityContext(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityError_code(ctx context.Context, field graphql.CollectedField, obj *model.ActivityError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityCode)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityCode2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityCode(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityError_message(ctx context.Context, field graphql.CollectedField, obj *model.ActivityError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityHumanMessage)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityHumanMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityHumanMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityLog_id(ctx context.Context, field graphql.CollectedField, obj *model.ActivityLog) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityLog_context(ctx context.Context, field graphql.CollectedField, obj *model.ActivityLog) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityContext)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityContext2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityContext(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityLog_code(ctx context.Context, field graphql.CollectedField, obj *model.ActivityLog) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityCode)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityCode2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityCode(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityLog_name(ctx context.Context, field graphql.CollectedField, obj *model.ActivityLog) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityMachineMessage)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityMachineMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityMachineMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityLog_message(ctx context.Context, field graphql.CollectedField, obj *model.ActivityLog) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityHumanMessage)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityHumanMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityHumanMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityLog_properties(ctx context.Context, field graphql.CollectedField, obj *model.ActivityLog) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Property)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProperty2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityWarning_id(ctx context.Context, field graphql.CollectedField, obj *model.ActivityWarning) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityWarning",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityWarning_context(ctx context.Context, field graphql.CollectedField, obj *model.ActivityWarning) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityWarning",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityContext)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityContext2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityContext(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityWarning_code(ctx context.Context, field graphql.CollectedField, obj *model.ActivityWarning) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityWarning",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityCode)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityCode2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityCode(ctx, field.Selections, res)
}

func (ec *executionContext) _ActivityWarning_message(ctx context.Context, field graphql.CollectedField, obj *model.ActivityWarning) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivityWarning",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityHumanMessage)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityHumanMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityHumanMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _AggregateLinkScorer_machineName(ctx context.Context, field graphql.CollectedField, obj *model.AggregateLinkScorer) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "AggregateLinkScorer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MachineName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorerMachineName2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AggregateLinkScorer_humanName(ctx context.Context, field graphql.CollectedField, obj *model.AggregateLinkScorer) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "AggregateLinkScorer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HumanName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorerHumanName2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AggregateLinkScores_scorer(ctx context.Context, field graphql.CollectedField, obj *model.AggregateLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "AggregateLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scorer, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.LinkScorer)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorer2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScorer(ctx, field.Selections, res)
}

func (ec *executionContext) _AggregateLinkScores_scores(ctx context.Context, field graphql.CollectedField, obj *model.AggregateLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "AggregateLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scores, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.LinkScores)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScores2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScores(ctx, field.Selections, res)
}

func (ec *executionContext) _AggregateLinkScores_isValid(ctx context.Context, field graphql.CollectedField, obj *model.AggregateLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "AggregateLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AggregateLinkScores_targetURL(ctx context.Context, field graphql.CollectedField, obj *model.AggregateLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "AggregateLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetURL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.URLText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, field.Selections, res)
}

func (ec *executionContext) _AggregateLinkScores_sharesCount(ctx context.Context, field graphql.CollectedField, obj *model.AggregateLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "AggregateLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AggregateLinkScores_commentsCount(ctx context.Context, field graphql.CollectedField, obj *model.AggregateLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "AggregateLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmark_id(ctx context.Context, field graphql.CollectedField, obj *model.Bookmark) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmark",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmark_link(ctx context.Context, field graphql.CollectedField, obj *model.Bookmark) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmark",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.BookmarkLink)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBookmarkLink2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarkLink(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmark_title(ctx context.Context, field graphql.CollectedField, obj *model.Bookmark) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmark",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentTitleText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentTitleText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleText(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmark_summary(ctx context.Context, field graphql.CollectedField, obj *model.Bookmark) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmark",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentSummaryText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentSummaryText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSummaryText(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmark_body(ctx context.Context, field graphql.CollectedField, obj *model.Bookmark) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmark",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentBodyText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentBodyText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentBodyText(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmark_taxonomies(ctx context.Context, field graphql.CollectedField, obj *model.Bookmark) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmark",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxonomies, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Taxonomy)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTaxonomy2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonomy(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmark_properties(ctx context.Context, field graphql.CollectedField, obj *model.Bookmark) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmark",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Properties)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProperties2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐProperties(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmark_scores(ctx context.Context, field graphql.CollectedField, obj *model.Bookmark) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmark",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scores, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.LinkScores)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOLinkScores2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScores(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarkLink_id(ctx context.Context, field graphql.CollectedField, obj *model.BookmarkLink) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarkLink",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarkLink_originalURLText(ctx context.Context, field graphql.CollectedField, obj *model.BookmarkLink) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarkLink",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalURLText, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.URLText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarkLink_finalURL(ctx context.Context, field graphql.CollectedField, obj *model.BookmarkLink) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarkLink",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinalURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.URL)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOURL2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐURL(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarkLink_isValid(ctx context.Context, field graphql.CollectedField, obj *model.BookmarkLink) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarkLink",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmarks_id(ctx context.Context, field graphql.CollectedField, obj *model.Bookmarks) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmarks",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmarks_source(ctx context.Context, field graphql.CollectedField, obj *model.Bookmarks) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmarks",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.BookmarksAPISource)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBookmarksAPISource2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarksAPISource(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmarks_content(ctx context.Context, field graphql.CollectedField, obj *model.Bookmarks) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmarks",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Bookmark)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBookmark2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmark(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmarks_activities(ctx context.Context, field graphql.CollectedField, obj *model.Bookmarks) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmarks",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activities, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Activities)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivities2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivities(ctx, field.Selections, res)
}

func (ec *executionContext) _Bookmarks_properties(ctx context.Context, field graphql.CollectedField, obj *model.Bookmarks) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Bookmarks",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Properties)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProperties2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐProperties(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarksAPISource_name(ctx context.Context, field graphql.CollectedField, obj *model.BookmarksAPISource) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarksAPISource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.NameText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNNameText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐNameText(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarksAPISource_apiEndpoint(ctx context.Context, field graphql.CollectedField, obj *model.BookmarksAPISource) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarksAPISource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIEndpoint, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.URLText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarksToMarkdownPipelineExecution_pipeline(ctx context.Context, field graphql.CollectedField, obj *model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarksToMarkdownPipelineExecution",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pipeline, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PipelineURL)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineURL(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarksToMarkdownPipelineExecution_strategy(ctx context.Context, field graphql.CollectedField, obj *model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarksToMarkdownPipelineExecution",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Strategy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PipelineExecutionStrategy)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineExecutionStrategy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecutionStrategy(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarksToMarkdownPipelineExecution_executionID(ctx context.Context, field graphql.CollectedField, obj *model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarksToMarkdownPipelineExecution",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecutionID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PipelineExecutionID)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineExecutionID2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecutionID(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarksToMarkdownPipelineExecution_settings(ctx context.Context, field graphql.CollectedField, obj *model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarksToMarkdownPipelineExecution",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SettingsBundle)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSettingsBundle2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundle(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarksToMarkdownPipelineExecution_bookmarks(ctx context.Context, field graphql.CollectedField, obj *model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarksToMarkdownPipelineExecution",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bookmarks, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Bookmarks)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBookmarks2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarks(ctx, field.Selections, res)
}

func (ec *executionContext) _BookmarksToMarkdownPipelineExecution_activities(ctx context.Context, field graphql.CollectedField, obj *model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "BookmarksToMarkdownPipelineExecution",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activities, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Activities)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivities2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivities(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentBodySettings_allowFrontmatter(ctx context.Context, field graphql.CollectedField, obj *model.ContentBodySettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentBodySettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowFrontmatter, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentBodySettings_frontMatterPropertyNamePrefix(ctx context.Context, field graphql.CollectedField, obj *model.ContentBodySettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentBodySettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontMatterPropertyNamePrefix, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentEditActivity_id(ctx context.Context, field graphql.CollectedField, obj *model.ContentEditActivity) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentEditActivity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentEditActivity_context(ctx context.Context, field graphql.CollectedField, obj *model.ContentEditActivity) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentEditActivity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityContext)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityContext2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityContext(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentEditActivity_code(ctx context.Context, field graphql.CollectedField, obj *model.ContentEditActivity) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentEditActivity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityCode)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityCode2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityCode(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentEditActivity_name(ctx context.Context, field graphql.CollectedField, obj *model.ContentEditActivity) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentEditActivity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityMachineMessage)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityMachineMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityMachineMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentEditActivity_message(ctx context.Context, field graphql.CollectedField, obj *model.ContentEditActivity) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentEditActivity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityHumanMessage)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNActivityHumanMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityHumanMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentEditActivity_properties(ctx context.Context, field graphql.CollectedField, obj *model.ContentEditActivity) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentEditActivity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Property)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProperty2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentEditActivity_original(ctx context.Context, field graphql.CollectedField, obj *model.ContentEditActivity) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentEditActivity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Original, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentEditActivity_modified(ctx context.Context, field graphql.CollectedField, obj *model.ContentEditActivity) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentEditActivity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modified, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentSettings_title(ctx context.Context, field graphql.CollectedField, obj *model.ContentSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentTitleSettings)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentTitleSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentSettings_summary(ctx context.Context, field graphql.CollectedField, obj *model.ContentSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentSummarySettings)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentSummarySettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSummarySettings(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentSettings_body(ctx context.Context, field graphql.CollectedField, obj *model.ContentSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentBodySettings)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentBodySettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentBodySettings(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentSummarySettings_policy(ctx context.Context, field graphql.CollectedField, obj *model.ContentSummarySettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentSummarySettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Policy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentSummaryPolicy)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentSummaryPolicy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSummaryPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentTitleSettings_pipedSuffixPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ContentTitleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentTitleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipedSuffixPolicy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentTitleSuffixPolicy)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentTitleSuffixPolicy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleSuffixPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentTitleSettings_hyphenatedSuffixPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ContentTitleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ContentTitleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HyphenatedSuffixPolicy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentTitleSuffixPolicy)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentTitleSuffixPolicy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleSuffixPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _DateTimeProperty_name(ctx context.Context, field graphql.CollectedField, obj *model.DateTimeProperty) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "DateTimeProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PropertyName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPropertyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPropertyName(ctx, field.Selections, res)
}

func (ec *executionContext) _DateTimeProperty_value(ctx context.Context, field graphql.CollectedField, obj *model.DateTimeProperty) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "DateTimeProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DateTime)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNDateTime2githubᚗcomᚋlectioᚋgraphᚋmodelᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FacebookLinkScorer_machineName(ctx context.Context, field graphql.CollectedField, obj *model.FacebookLinkScorer) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FacebookLinkScorer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MachineName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorerMachineName2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FacebookLinkScorer_humanName(ctx context.Context, field graphql.CollectedField, obj *model.FacebookLinkScorer) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FacebookLinkScorer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HumanName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorerHumanName2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FacebookLinkScores_scorer(ctx context.Context, field graphql.CollectedField, obj *model.FacebookLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FacebookLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scorer, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.LinkScorer)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorer2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScorer(ctx, field.Selections, res)
}

func (ec *executionContext) _FacebookLinkScores_isValid(ctx context.Context, field graphql.CollectedField, obj *model.FacebookLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FacebookLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FacebookLinkScores_targetURL(ctx context.Context, field graphql.CollectedField, obj *model.FacebookLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FacebookLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetURL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.URLText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, field.Selections, res)
}

func (ec *executionContext) _FacebookLinkScores_sharesCount(ctx context.Context, field graphql.CollectedField, obj *model.FacebookLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FacebookLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FacebookLinkScores_commentsCount(ctx context.Context, field graphql.CollectedField, obj *model.FacebookLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FacebookLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FileRepository_name(ctx context.Context, field graphql.CollectedField, obj *model.FileRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FileRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.RepositoryName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRepositoryName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepositoryName(ctx, field.Selections, res)
}

func (ec *executionContext) _FileRepository_url(ctx context.Context, field graphql.CollectedField, obj *model.FileRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FileRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.URLText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRepositoryURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, field.Selections, res)
}

func (ec *executionContext) _FileRepository_rootPath(ctx context.Context, field graphql.CollectedField, obj *model.FileRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FileRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootPath, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFileRepositoryPath2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FileRepository_createRootPath(ctx context.Context, field graphql.CollectedField, obj *model.FileRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FileRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateRootPath, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FlagProperty_name(ctx context.Context, field graphql.CollectedField, obj *model.FlagProperty) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FlagProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PropertyName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPropertyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPropertyName(ctx, field.Selections, res)
}

func (ec *executionContext) _FlagProperty_value(ctx context.Context, field graphql.CollectedField, obj *model.FlagProperty) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FlagProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FlatTaxonomy_name(ctx context.Context, field graphql.CollectedField, obj *model.FlatTaxonomy) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FlatTaxonomy",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TaxonomyName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTaxonomyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonomyName(ctx, field.Selections, res)
}

func (ec *executionContext) _FlatTaxonomy_taxa(ctx context.Context, field graphql.CollectedField, obj *model.FlatTaxonomy) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "FlatTaxonomy",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxa, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.TaxonName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTaxonName2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx, field.Selections, res)
}

func (ec *executionContext) _GitHubRepository_name(ctx context.Context, field graphql.CollectedField, obj *model.GitHubRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "GitHubRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.RepositoryName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRepositoryName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepositoryName(ctx, field.Selections, res)
}

func (ec *executionContext) _GitHubRepository_url(ctx context.Context, field graphql.CollectedField, obj *model.GitHubRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "GitHubRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.URLText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRepositoryURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, field.Selections, res)
}

func (ec *executionContext) _GitHubRepository_token(ctx context.Context, field graphql.CollectedField, obj *model.GitHubRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "GitHubRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SecretText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNSecretText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSecretText(ctx, field.Selections, res)
}

func (ec *executionContext) _HTTPClientSettings_userAgent(ctx context.Context, field graphql.CollectedField, obj *model.HTTPClientSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HTTPClientSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAgent, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HTTPClientSettings_timeout(ctx context.Context, field graphql.CollectedField, obj *model.HTTPClientSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HTTPClientSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TimeoutDuration)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHTTPClientTimeoutDuration2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTimeoutDuration(ctx, field.Selections, res)
}

func (ec *executionContext) _HiearchicalTaxonomy_name(ctx context.Context, field graphql.CollectedField, obj *model.HiearchicalTaxonomy) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HiearchicalTaxonomy",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TaxonomyName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTaxonomyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonomyName(ctx, field.Selections, res)
}

func (ec *executionContext) _HiearchicalTaxonomy_taxa(ctx context.Context, field graphql.CollectedField, obj *model.HiearchicalTaxonomy) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HiearchicalTaxonomy",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxa, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.TaxonNode)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTaxonNode2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonNode(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkLifecyleSettings_traverseLinks(ctx context.Context, field graphql.CollectedField, obj *model.LinkLifecyleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkLifecyleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TraverseLinks, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkLifecyleSettings_scoreLinks(ctx context.Context, field graphql.CollectedField, obj *model.LinkLifecyleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkLifecyleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreLinks, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.LinkScoresLifecycleSettings)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScoresLifecycleSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScoresLifecycleSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkLifecyleSettings_ignoreURLsRegExprs(ctx context.Context, field graphql.CollectedField, obj *model.LinkLifecyleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkLifecyleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreURLsRegExprs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegularExpression)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORegularExpression2ᚕᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkLifecyleSettings_removeParamsFromURLsRegEx(ctx context.Context, field graphql.CollectedField, obj *model.LinkLifecyleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkLifecyleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoveParamsFromURLsRegEx, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegularExpression)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORegularExpression2ᚕᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkLifecyleSettings_followRedirectsInLinkDestinationHTMLContent(ctx context.Context, field graphql.CollectedField, obj *model.LinkLifecyleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkLifecyleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowRedirectsInLinkDestinationHTMLContent, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkLifecyleSettings_parseMetaDataInLinkDestinationHTMLContent(ctx context.Context, field graphql.CollectedField, obj *model.LinkLifecyleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkLifecyleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParseMetaDataInLinkDestinationHTMLContent, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkLifecyleSettings_downloadLinkDestinationAttachments(ctx context.Context, field graphql.CollectedField, obj *model.LinkLifecyleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkLifecyleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DownloadLinkDestinationAttachments, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkScoresLifecycleSettings_score(ctx context.Context, field graphql.CollectedField, obj *model.LinkScoresLifecycleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkScoresLifecycleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkScoresLifecycleSettings_simulate(ctx context.Context, field graphql.CollectedField, obj *model.LinkScoresLifecycleSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkScoresLifecycleSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Simulate, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedInLinkScorer_machineName(ctx context.Context, field graphql.CollectedField, obj *model.LinkedInLinkScorer) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkedInLinkScorer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MachineName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorerMachineName2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedInLinkScorer_humanName(ctx context.Context, field graphql.CollectedField, obj *model.LinkedInLinkScorer) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkedInLinkScorer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HumanName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorerHumanName2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedInLinkScores_scorer(ctx context.Context, field graphql.CollectedField, obj *model.LinkedInLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkedInLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scorer, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.LinkScorer)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkScorer2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScorer(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedInLinkScores_isValid(ctx context.Context, field graphql.CollectedField, obj *model.LinkedInLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkedInLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedInLinkScores_targetURL(ctx context.Context, field graphql.CollectedField, obj *model.LinkedInLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkedInLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetURL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.URLText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedInLinkScores_sharesCount(ctx context.Context, field graphql.CollectedField, obj *model.LinkedInLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkedInLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharesCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedInLinkScores_commentsCount(ctx context.Context, field graphql.CollectedField, obj *model.LinkedInLinkScores) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LinkedInLinkScores",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_executePipeline(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_executePipeline_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ExecutePipeline(rctx, args["input"].(model.ExecutePipelineInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PipelineExecution)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineExecution2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecution(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_executeBookmarksToMarkdownPipeline(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_executeBookmarksToMarkdownPipeline_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ExecuteBookmarksToMarkdownPipeline(rctx, args["input"].(model.BookmarksToMarkdownPipelineInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BookmarksToMarkdownPipelineExecution)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBookmarksToMarkdownPipelineExecution2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarksToMarkdownPipelineExecution(ctx, field.Selections, res)
}

func (ec *executionContext) _NumericProperty_name(ctx context.Context, field graphql.CollectedField, obj *model.NumericProperty) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "NumericProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PropertyName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPropertyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPropertyName(ctx, field.Selections, res)
}

func (ec *executionContext) _NumericProperty_value(ctx context.Context, field graphql.CollectedField, obj *model.NumericProperty) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "NumericProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ObservationSettings_progressReporterType(ctx context.Context, field graphql.CollectedField, obj *model.ObservationSettings) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ObservationSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProgressReporterType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ProgressReporterType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProgressReporterType2githubᚗcomᚋlectioᚋgraphᚋmodelᚐProgressReporterType(ctx, field.Selections, res)
}

func (ec *executionContext) _Properties_all(ctx context.Context, field graphql.CollectedField, obj *model.Properties) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Properties",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Property)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProperty2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_defaultSettingsBundle(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DefaultSettingsBundle(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SettingsBundle)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSettingsBundle2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundle(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_settingsBundle(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_settingsBundle_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SettingsBundle(rctx, args["name"].(model.SettingsBundleName))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SettingsBundle)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSettingsBundle2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundle(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_source(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_source_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Source(rctx, args["source"].(model.URLText))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.ContentSource)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOContentSource2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSource(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_bookmarks(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_bookmarks_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Bookmarks(rctx, args["source"].(model.URLText), args["settingsBundle"].(model.SettingsBundleName))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Bookmarks)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBookmarks2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarks(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Repositories_all(ctx context.Context, field graphql.CollectedField, obj *model.Repositories) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Repositories",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Repository)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORepository2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _SecretText_vault(ctx context.Context, field graphql.CollectedField, obj *model.SecretText) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SecretText",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vault, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SecretsVault)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNSecretsVault2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSecretsVault(ctx, field.Selections, res)
}

func (ec *executionContext) _SecretText_encryptedText(ctx context.Context, field graphql.CollectedField, obj *model.SecretText) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SecretText",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncryptedText, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SettingsBundle_name(ctx context.Context, field graphql.CollectedField, obj *model.SettingsBundle) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SettingsBundle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SettingsBundleName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNSettingsBundleName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundleName(ctx, field.Selections, res)
}

func (ec *executionContext) _SettingsBundle_links(ctx context.Context, field graphql.CollectedField, obj *model.SettingsBundle) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SettingsBundle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Links, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.LinkLifecyleSettings)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLinkLifecyleSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkLifecyleSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _SettingsBundle_content(ctx context.Context, field graphql.CollectedField, obj *model.SettingsBundle) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SettingsBundle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContentSettings)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNContentSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _SettingsBundle_httpClient(ctx context.Context, field graphql.CollectedField, obj *model.SettingsBundle) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SettingsBundle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPClient, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.HTTPClientSettings)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHTTPClientSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐHTTPClientSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _SettingsBundle_observe(ctx context.Context, field graphql.CollectedField, obj *model.SettingsBundle) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SettingsBundle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Observe, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ObservationSettings)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNObservationSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐObservationSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _SettingsBundle_repositories(ctx context.Context, field graphql.CollectedField, obj *model.SettingsBundle) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SettingsBundle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repositories, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Repositories)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRepositories2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepositories(ctx, field.Selections, res)
}

func (ec *executionContext) _TaxonNode_taxon(ctx context.Context, field graphql.CollectedField, obj *model.TaxonNode) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TaxonNode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxon, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TaxonName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTaxonName2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx, field.Selections, res)
}

func (ec *executionContext) _TaxonNode_taxa(ctx context.Context, field graphql.CollectedField, obj *model.TaxonNode) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TaxonNode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxa, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.TaxonNode)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTaxonNode2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonNode(ctx, field.Selections, res)
}

func (ec *executionContext) _TempFileRepository_name(ctx context.Context, field graphql.CollectedField, obj *model.TempFileRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TempFileRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.RepositoryName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRepositoryName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepositoryName(ctx, field.Selections, res)
}

func (ec *executionContext) _TempFileRepository_url(ctx context.Context, field graphql.CollectedField, obj *model.TempFileRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TempFileRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.URLText)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRepositoryURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, field.Selections, res)
}

func (ec *executionContext) _TempFileRepository_prefix(ctx context.Context, field graphql.CollectedField, obj *model.TempFileRepository) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TempFileRepository",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTempFileRepositoryPrefix2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TextProperty_name(ctx context.Context, field graphql.CollectedField, obj *model.TextProperty) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TextProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PropertyName)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPropertyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPropertyName(ctx, field.Selections, res)
}

func (ec *executionContext) _TextProperty_value(ctx context.Context, field graphql.CollectedField, obj *model.TextProperty) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TextProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBookmarksToMarkdownPipelineInput(ctx context.Context, v interface{}) (model.BookmarksToMarkdownPipelineInput, error) {
	var it model.BookmarksToMarkdownPipelineInput
	var asMap = v.(map[string]interface{})

	if _, present := asMap["strategy"]; !present {
		asMap["strategy"] = "Asynchronous"
	}
	if _, present := asMap["settingsBundle"]; !present {
		asMap["settingsBundle"] = "DEFAULT"
	}
	if _, present := asMap["repository"]; !present {
		asMap["repository"] = "TEMP"
	}
	if _, present := asMap["flavor"]; !present {
		asMap["flavor"] = "HugoContent"
	}
	if _, present := asMap["cancelOnWriteErrors"]; !present {
		asMap["cancelOnWriteErrors"] = 10
	}
	if _, present := asMap["contentPathRel"]; !present {
		asMap["contentPathRel"] = "content/post"
	}
	if _, present := asMap["imagesCachePathRel"]; !present {
		asMap["imagesCachePathRel"] = "static/img/content/post"
	}
	if _, present := asMap["imagesCacheRootURL"]; !present {
		asMap["imagesCacheRootURL"] = "/img/content/post"
	}

	for k, v := range asMap {
		switch k {
		case "strategy":
			var err error
			it.Strategy, err = ec.unmarshalNPipelineExecutionStrategy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecutionStrategy(ctx, v)
			if err != nil {
				return it, err
			}
		case "bookmarksURL":
			var err error
			it.BookmarksURL, err = ec.unmarshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, v)
			if err != nil {
				return it, err
			}
		case "settingsBundle":
			var err error
			it.SettingsBundle, err = ec.unmarshalNSettingsBundleName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundleName(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error
			it.Repository, err = ec.unmarshalNRepositoryName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepositoryName(ctx, v)
			if err != nil {
				return it, err
			}
		case "flavor":
			var err error
			it.Flavor, err = ec.unmarshalNMarkdownFlavor2githubᚗcomᚋlectioᚋgraphᚋmodelᚐMarkdownFlavor(ctx, v)
			if err != nil {
				return it, err
			}
		case "cancelOnWriteErrors":
			var err error
			it.CancelOnWriteErrors, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentPathRel":
			var err error
			it.ContentPathRel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "imagesCachePathRel":
			var err error
			it.ImagesCachePathRel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "imagesCacheRootURL":
			var err error
			it.ImagesCacheRootURL, err = ec.unmarshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExecutePipelineInput(ctx context.Context, v interface{}) (model.ExecutePipelineInput, error) {
	var it model.ExecutePipelineInput
	var asMap = v.(map[string]interface{})

	if _, present := asMap["strategy"]; !present {
		asMap["strategy"] = "Asynchronous"
	}
	if _, present := asMap["settingsBundle"]; !present {
		asMap["settingsBundle"] = "DEFAULT"
	}

	for k, v := range asMap {
		switch k {
		case "pipeline":
			var err error
			it.Pipeline, err = ec.unmarshalNPipelineURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineURL(ctx, v)
			if err != nil {
				return it, err
			}
		case "strategy":
			var err error
			it.Strategy, err = ec.unmarshalNPipelineExecutionStrategy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecutionStrategy(ctx, v)
			if err != nil {
				return it, err
			}
		case "settingsBundle":
			var err error
			it.SettingsBundle, err = ec.unmarshalNSettingsBundleName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundleName(ctx, v)
			if err != nil {
				return it, err
			}
		case "params":
			var err error
			it.Params, err = ec.unmarshalOPipelineParamInput2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineParamInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPipelineParamInput(ctx context.Context, v interface{}) (model.PipelineParamInput, error) {
	var it model.PipelineParamInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNPipelineParamName2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _APISource(ctx context.Context, sel ast.SelectionSet, obj *model.APISource) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.BookmarksAPISource:
		return ec._BookmarksAPISource(ctx, sel, &obj)
	case *model.BookmarksAPISource:
		return ec._BookmarksAPISource(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Activity(ctx context.Context, sel ast.SelectionSet, obj *model.Activity) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.ActivityLog:
		return ec._ActivityLog(ctx, sel, &obj)
	case *model.ActivityLog:
		return ec._ActivityLog(ctx, sel, obj)
	case model.ContentEditActivity:
		return ec._ContentEditActivity(ctx, sel, &obj)
	case *model.ContentEditActivity:
		return ec._ContentEditActivity(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Content(ctx context.Context, sel ast.SelectionSet, obj *model.Content) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.Bookmark:
		return ec._Bookmark(ctx, sel, &obj)
	case *model.Bookmark:
		return ec._Bookmark(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ContentCollection(ctx context.Context, sel ast.SelectionSet, obj *model.ContentCollection) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.Bookmarks:
		return ec._Bookmarks(ctx, sel, &obj)
	case *model.Bookmarks:
		return ec._Bookmarks(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ContentSource(ctx context.Context, sel ast.SelectionSet, obj *model.ContentSource) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.BookmarksAPISource:
		return ec._BookmarksAPISource(ctx, sel, &obj)
	case *model.BookmarksAPISource:
		return ec._BookmarksAPISource(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Link(ctx context.Context, sel ast.SelectionSet, obj *model.Link) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.BookmarkLink:
		return ec._BookmarkLink(ctx, sel, &obj)
	case *model.BookmarkLink:
		return ec._BookmarkLink(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _LinkScorer(ctx context.Context, sel ast.SelectionSet, obj *model.LinkScorer) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.AggregateLinkScorer:
		return ec._AggregateLinkScorer(ctx, sel, &obj)
	case *model.AggregateLinkScorer:
		return ec._AggregateLinkScorer(ctx, sel, obj)
	case model.FacebookLinkScorer:
		return ec._FacebookLinkScorer(ctx, sel, &obj)
	case *model.FacebookLinkScorer:
		return ec._FacebookLinkScorer(ctx, sel, obj)
	case model.LinkedInLinkScorer:
		return ec._LinkedInLinkScorer(ctx, sel, &obj)
	case *model.LinkedInLinkScorer:
		return ec._LinkedInLinkScorer(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _LinkScores(ctx context.Context, sel ast.SelectionSet, obj *model.LinkScores) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.AggregateLinkScores:
		return ec._AggregateLinkScores(ctx, sel, &obj)
	case *model.AggregateLinkScores:
		return ec._AggregateLinkScores(ctx, sel, obj)
	case model.FacebookLinkScores:
		return ec._FacebookLinkScores(ctx, sel, &obj)
	case *model.FacebookLinkScores:
		return ec._FacebookLinkScores(ctx, sel, obj)
	case model.LinkedInLinkScores:
		return ec._LinkedInLinkScores(ctx, sel, &obj)
	case *model.LinkedInLinkScores:
		return ec._LinkedInLinkScores(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _PipelineExecution(ctx context.Context, sel ast.SelectionSet, obj *model.PipelineExecution) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.BookmarksToMarkdownPipelineExecution:
		return ec._BookmarksToMarkdownPipelineExecution(ctx, sel, &obj)
	case *model.BookmarksToMarkdownPipelineExecution:
		return ec._BookmarksToMarkdownPipelineExecution(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Property(ctx context.Context, sel ast.SelectionSet, obj *model.Property) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.TextProperty:
		return ec._TextProperty(ctx, sel, &obj)
	case *model.TextProperty:
		return ec._TextProperty(ctx, sel, obj)
	case model.DateTimeProperty:
		return ec._DateTimeProperty(ctx, sel, &obj)
	case *model.DateTimeProperty:
		return ec._DateTimeProperty(ctx, sel, obj)
	case model.FlagProperty:
		return ec._FlagProperty(ctx, sel, &obj)
	case *model.FlagProperty:
		return ec._FlagProperty(ctx, sel, obj)
	case model.NumericProperty:
		return ec._NumericProperty(ctx, sel, &obj)
	case *model.NumericProperty:
		return ec._NumericProperty(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Repository(ctx context.Context, sel ast.SelectionSet, obj *model.Repository) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.FileRepository:
		return ec._FileRepository(ctx, sel, &obj)
	case *model.FileRepository:
		return ec._FileRepository(ctx, sel, obj)
	case model.TempFileRepository:
		return ec._TempFileRepository(ctx, sel, &obj)
	case *model.TempFileRepository:
		return ec._TempFileRepository(ctx, sel, obj)
	case model.GitHubRepository:
		return ec._GitHubRepository(ctx, sel, &obj)
	case *model.GitHubRepository:
		return ec._GitHubRepository(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SecretValue(ctx context.Context, sel ast.SelectionSet, obj *model.SecretValue) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.SecretText:
		return ec._SecretText(ctx, sel, &obj)
	case *model.SecretText:
		return ec._SecretText(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Taxonomy(ctx context.Context, sel ast.SelectionSet, obj *model.Taxonomy) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.FlatTaxonomy:
		return ec._FlatTaxonomy(ctx, sel, &obj)
	case *model.FlatTaxonomy:
		return ec._FlatTaxonomy(ctx, sel, obj)
	case model.HiearchicalTaxonomy:
		return ec._HiearchicalTaxonomy(ctx, sel, &obj)
	case *model.HiearchicalTaxonomy:
		return ec._HiearchicalTaxonomy(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activitiesImplementors = []string{"Activities"}

func (ec *executionContext) _Activities(ctx context.Context, sel ast.SelectionSet, obj *model.Activities) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, activitiesImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Activities")
		case "history":
			out.Values[i] = ec._Activities_history(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._Activities_errors(ctx, field, obj)
		case "warnings":
			out.Values[i] = ec._Activities_warnings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var activityErrorImplementors = []string{"ActivityError"}

func (ec *executionContext) _ActivityError(ctx context.Context, sel ast.SelectionSet, obj *model.ActivityError) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, activityErrorImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityError")
		case "id":
			out.Values[i] = ec._ActivityError_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "context":
			out.Values[i] = ec._ActivityError_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "code":
			out.Values[i] = ec._ActivityError_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._ActivityError_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var activityLogImplementors = []string{"ActivityLog", "Activity"}

func (ec *executionContext) _ActivityLog(ctx context.Context, sel ast.SelectionSet, obj *model.ActivityLog) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, activityLogImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityLog")
		case "id":
			out.Values[i] = ec._ActivityLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "context":
			out.Values[i] = ec._ActivityLog_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "code":
			out.Values[i] = ec._ActivityLog_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec._ActivityLog_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._ActivityLog_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "properties":
			out.Values[i] = ec._ActivityLog_properties(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var activityWarningImplementors = []string{"ActivityWarning"}

func (ec *executionContext) _ActivityWarning(ctx context.Context, sel ast.SelectionSet, obj *model.ActivityWarning) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, activityWarningImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityWarning")
		case "id":
			out.Values[i] = ec._ActivityWarning_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "context":
			out.Values[i] = ec._ActivityWarning_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "code":
			out.Values[i] = ec._ActivityWarning_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._ActivityWarning_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var aggregateLinkScorerImplementors = []string{"AggregateLinkScorer", "LinkScorer"}

func (ec *executionContext) _AggregateLinkScorer(ctx context.Context, sel ast.SelectionSet, obj *model.AggregateLinkScorer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, aggregateLinkScorerImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AggregateLinkScorer")
		case "machineName":
			out.Values[i] = ec._AggregateLinkScorer_machineName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "humanName":
			out.Values[i] = ec._AggregateLinkScorer_humanName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var aggregateLinkScoresImplementors = []string{"AggregateLinkScores", "LinkScores"}

func (ec *executionContext) _AggregateLinkScores(ctx context.Context, sel ast.SelectionSet, obj *model.AggregateLinkScores) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, aggregateLinkScoresImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AggregateLinkScores")
		case "scorer":
			out.Values[i] = ec._AggregateLinkScores_scorer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "scores":
			out.Values[i] = ec._AggregateLinkScores_scores(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isValid":
			out.Values[i] = ec._AggregateLinkScores_isValid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "targetURL":
			out.Values[i] = ec._AggregateLinkScores_targetURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "sharesCount":
			out.Values[i] = ec._AggregateLinkScores_sharesCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "commentsCount":
			out.Values[i] = ec._AggregateLinkScores_commentsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var bookmarkImplementors = []string{"Bookmark", "Content"}

func (ec *executionContext) _Bookmark(ctx context.Context, sel ast.SelectionSet, obj *model.Bookmark) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bookmarkImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Bookmark")
		case "id":
			out.Values[i] = ec._Bookmark_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "link":
			out.Values[i] = ec._Bookmark_link(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "title":
			out.Values[i] = ec._Bookmark_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "summary":
			out.Values[i] = ec._Bookmark_summary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "body":
			out.Values[i] = ec._Bookmark_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "taxonomies":
			out.Values[i] = ec._Bookmark_taxonomies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "properties":
			out.Values[i] = ec._Bookmark_properties(ctx, field, obj)
		case "scores":
			out.Values[i] = ec._Bookmark_scores(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var bookmarkLinkImplementors = []string{"BookmarkLink", "Link"}

func (ec *executionContext) _BookmarkLink(ctx context.Context, sel ast.SelectionSet, obj *model.BookmarkLink) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bookmarkLinkImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BookmarkLink")
		case "id":
			out.Values[i] = ec._BookmarkLink_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "originalURLText":
			out.Values[i] = ec._BookmarkLink_originalURLText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "finalURL":
			out.Values[i] = ec._BookmarkLink_finalURL(ctx, field, obj)
		case "isValid":
			out.Values[i] = ec._BookmarkLink_isValid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var bookmarksImplementors = []string{"Bookmarks", "ContentCollection"}

func (ec *executionContext) _Bookmarks(ctx context.Context, sel ast.SelectionSet, obj *model.Bookmarks) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bookmarksImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Bookmarks")
		case "id":
			out.Values[i] = ec._Bookmarks_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "source":
			out.Values[i] = ec._Bookmarks_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "content":
			out.Values[i] = ec._Bookmarks_content(ctx, field, obj)
		case "activities":
			out.Values[i] = ec._Bookmarks_activities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "properties":
			out.Values[i] = ec._Bookmarks_properties(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var bookmarksAPISourceImplementors = []string{"BookmarksAPISource", "ContentSource", "APISource"}

func (ec *executionContext) _BookmarksAPISource(ctx context.Context, sel ast.SelectionSet, obj *model.BookmarksAPISource) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bookmarksAPISourceImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BookmarksAPISource")
		case "name":
			out.Values[i] = ec._BookmarksAPISource_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "apiEndpoint":
			out.Values[i] = ec._BookmarksAPISource_apiEndpoint(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var bookmarksToMarkdownPipelineExecutionImplementors = []string{"BookmarksToMarkdownPipelineExecution", "PipelineExecution"}

func (ec *executionContext) _BookmarksToMarkdownPipelineExecution(ctx context.Context, sel ast.SelectionSet, obj *model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bookmarksToMarkdownPipelineExecutionImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BookmarksToMarkdownPipelineExecution")
		case "pipeline":
			out.Values[i] = ec._BookmarksToMarkdownPipelineExecution_pipeline(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "strategy":
			out.Values[i] = ec._BookmarksToMarkdownPipelineExecution_strategy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "executionID":
			out.Values[i] = ec._BookmarksToMarkdownPipelineExecution_executionID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "settings":
			out.Values[i] = ec._BookmarksToMarkdownPipelineExecution_settings(ctx, field, obj)
		case "bookmarks":
			out.Values[i] = ec._BookmarksToMarkdownPipelineExecution_bookmarks(ctx, field, obj)
		case "activities":
			out.Values[i] = ec._BookmarksToMarkdownPipelineExecution_activities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var contentBodySettingsImplementors = []string{"ContentBodySettings"}

func (ec *executionContext) _ContentBodySettings(ctx context.Context, sel ast.SelectionSet, obj *model.ContentBodySettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contentBodySettingsImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentBodySettings")
		case "allowFrontmatter":
			out.Values[i] = ec._ContentBodySettings_allowFrontmatter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "frontMatterPropertyNamePrefix":
			out.Values[i] = ec._ContentBodySettings_frontMatterPropertyNamePrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var contentEditActivityImplementors = []string{"ContentEditActivity", "Activity"}

func (ec *executionContext) _ContentEditActivity(ctx context.Context, sel ast.SelectionSet, obj *model.ContentEditActivity) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contentEditActivityImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentEditActivity")
		case "id":
			out.Values[i] = ec._ContentEditActivity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "context":
			out.Values[i] = ec._ContentEditActivity_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "code":
			out.Values[i] = ec._ContentEditActivity_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec._ContentEditActivity_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._ContentEditActivity_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "properties":
			out.Values[i] = ec._ContentEditActivity_properties(ctx, field, obj)
		case "original":
			out.Values[i] = ec._ContentEditActivity_original(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "modified":
			out.Values[i] = ec._ContentEditActivity_modified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var contentSettingsImplementors = []string{"ContentSettings"}

func (ec *executionContext) _ContentSettings(ctx context.Context, sel ast.SelectionSet, obj *model.ContentSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contentSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentSettings")
		case "title":
			out.Values[i] = ec._ContentSettings_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "summary":
			out.Values[i] = ec._ContentSettings_summary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "body":
			out.Values[i] = ec._ContentSettings_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var contentSummarySettingsImplementors = []string{"ContentSummarySettings"}

func (ec *executionContext) _ContentSummarySettings(ctx context.Context, sel ast.SelectionSet, obj *model.ContentSummarySettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contentSummarySettingsImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentSummarySettings")
		case "policy":
			out.Values[i] = ec._ContentSummarySettings_policy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var contentTitleSettingsImplementors = []string{"ContentTitleSettings"}

func (ec *executionContext) _ContentTitleSettings(ctx context.Context, sel ast.SelectionSet, obj *model.ContentTitleSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contentTitleSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentTitleSettings")
		case "pipedSuffixPolicy":
			out.Values[i] = ec._ContentTitleSettings_pipedSuffixPolicy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "hyphenatedSuffixPolicy":
			out.Values[i] = ec._ContentTitleSettings_hyphenatedSuffixPolicy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var dateTimePropertyImplementors = []string{"DateTimeProperty", "Property"}

func (ec *executionContext) _DateTimeProperty(ctx context.Context, sel ast.SelectionSet, obj *model.DateTimeProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, dateTimePropertyImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DateTimeProperty")
		case "name":
			out.Values[i] = ec._DateTimeProperty_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._DateTimeProperty_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var facebookLinkScorerImplementors = []string{"FacebookLinkScorer", "LinkScorer"}

func (ec *executionContext) _FacebookLinkScorer(ctx context.Context, sel ast.SelectionSet, obj *model.FacebookLinkScorer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, facebookLinkScorerImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacebookLinkScorer")
		case "machineName":
			out.Values[i] = ec._FacebookLinkScorer_machineName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "humanName":
			out.Values[i] = ec._FacebookLinkScorer_humanName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var facebookLinkScoresImplementors = []string{"FacebookLinkScores", "LinkScores"}

func (ec *executionContext) _FacebookLinkScores(ctx context.Context, sel ast.SelectionSet, obj *model.FacebookLinkScores) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, facebookLinkScoresImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacebookLinkScores")
		case "scorer":
			out.Values[i] = ec._FacebookLinkScores_scorer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isValid":
			out.Values[i] = ec._FacebookLinkScores_isValid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "targetURL":
			out.Values[i] = ec._FacebookLinkScores_targetURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "sharesCount":
			out.Values[i] = ec._FacebookLinkScores_sharesCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "commentsCount":
			out.Values[i] = ec._FacebookLinkScores_commentsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var fileRepositoryImplementors = []string{"FileRepository", "Repository"}

func (ec *executionContext) _FileRepository(ctx context.Context, sel ast.SelectionSet, obj *model.FileRepository) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fileRepositoryImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileRepository")
		case "name":
			out.Values[i] = ec._FileRepository_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "url":
			out.Values[i] = ec._FileRepository_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "rootPath":
			out.Values[i] = ec._FileRepository_rootPath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createRootPath":
			out.Values[i] = ec._FileRepository_createRootPath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var flagPropertyImplementors = []string{"FlagProperty", "Property"}

func (ec *executionContext) _FlagProperty(ctx context.Context, sel ast.SelectionSet, obj *model.FlagProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, flagPropertyImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FlagProperty")
		case "name":
			out.Values[i] = ec._FlagProperty_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._FlagProperty_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var flatTaxonomyImplementors = []string{"FlatTaxonomy", "Taxonomy"}

func (ec *executionContext) _FlatTaxonomy(ctx context.Context, sel ast.SelectionSet, obj *model.FlatTaxonomy) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, flatTaxonomyImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FlatTaxonomy")
		case "name":
			out.Values[i] = ec._FlatTaxonomy_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "taxa":
			out.Values[i] = ec._FlatTaxonomy_taxa(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var gitHubRepositoryImplementors = []string{"GitHubRepository", "Repository"}

func (ec *executionContext) _GitHubRepository(ctx context.Context, sel ast.SelectionSet, obj *model.GitHubRepository) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, gitHubRepositoryImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GitHubRepository")
		case "name":
			out.Values[i] = ec._GitHubRepository_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "url":
			out.Values[i] = ec._GitHubRepository_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "token":
			out.Values[i] = ec._GitHubRepository_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var hTTPClientSettingsImplementors = []string{"HTTPClientSettings"}

func (ec *executionContext) _HTTPClientSettings(ctx context.Context, sel ast.SelectionSet, obj *model.HTTPClientSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, hTTPClientSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HTTPClientSettings")
		case "userAgent":
			out.Values[i] = ec._HTTPClientSettings_userAgent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "timeout":
			out.Values[i] = ec._HTTPClientSettings_timeout(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var hiearchicalTaxonomyImplementors = []string{"HiearchicalTaxonomy", "Taxonomy"}

func (ec *executionContext) _HiearchicalTaxonomy(ctx context.Context, sel ast.SelectionSet, obj *model.HiearchicalTaxonomy) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, hiearchicalTaxonomyImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HiearchicalTaxonomy")
		case "name":
			out.Values[i] = ec._HiearchicalTaxonomy_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "taxa":
			out.Values[i] = ec._HiearchicalTaxonomy_taxa(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var linkLifecyleSettingsImplementors = []string{"LinkLifecyleSettings"}

func (ec *executionContext) _LinkLifecyleSettings(ctx context.Context, sel ast.SelectionSet, obj *model.LinkLifecyleSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, linkLifecyleSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkLifecyleSettings")
		case "traverseLinks":
			out.Values[i] = ec._LinkLifecyleSettings_traverseLinks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "scoreLinks":
			out.Values[i] = ec._LinkLifecyleSettings_scoreLinks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "ignoreURLsRegExprs":
			out.Values[i] = ec._LinkLifecyleSettings_ignoreURLsRegExprs(ctx, field, obj)
		case "removeParamsFromURLsRegEx":
			out.Values[i] = ec._LinkLifecyleSettings_removeParamsFromURLsRegEx(ctx, field, obj)
		case "followRedirectsInLinkDestinationHTMLContent":
			out.Values[i] = ec._LinkLifecyleSettings_followRedirectsInLinkDestinationHTMLContent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "parseMetaDataInLinkDestinationHTMLContent":
			out.Values[i] = ec._LinkLifecyleSettings_parseMetaDataInLinkDestinationHTMLContent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "downloadLinkDestinationAttachments":
			out.Values[i] = ec._LinkLifecyleSettings_downloadLinkDestinationAttachments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var linkScoresLifecycleSettingsImplementors = []string{"LinkScoresLifecycleSettings"}

func (ec *executionContext) _LinkScoresLifecycleSettings(ctx context.Context, sel ast.SelectionSet, obj *model.LinkScoresLifecycleSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, linkScoresLifecycleSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkScoresLifecycleSettings")
		case "score":
			out.Values[i] = ec._LinkScoresLifecycleSettings_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "simulate":
			out.Values[i] = ec._LinkScoresLifecycleSettings_simulate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var linkedInLinkScorerImplementors = []string{"LinkedInLinkScorer", "LinkScorer"}

func (ec *executionContext) _LinkedInLinkScorer(ctx context.Context, sel ast.SelectionSet, obj *model.LinkedInLinkScorer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, linkedInLinkScorerImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkedInLinkScorer")
		case "machineName":
			out.Values[i] = ec._LinkedInLinkScorer_machineName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "humanName":
			out.Values[i] = ec._LinkedInLinkScorer_humanName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var linkedInLinkScoresImplementors = []string{"LinkedInLinkScores", "LinkScores"}

func (ec *executionContext) _LinkedInLinkScores(ctx context.Context, sel ast.SelectionSet, obj *model.LinkedInLinkScores) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, linkedInLinkScoresImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkedInLinkScores")
		case "scorer":
			out.Values[i] = ec._LinkedInLinkScores_scorer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isValid":
			out.Values[i] = ec._LinkedInLinkScores_isValid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "targetURL":
			out.Values[i] = ec._LinkedInLinkScores_targetURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "sharesCount":
			out.Values[i] = ec._LinkedInLinkScores_sharesCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "commentsCount":
			out.Values[i] = ec._LinkedInLinkScores_commentsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "executePipeline":
			out.Values[i] = ec._Mutation_executePipeline(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "executeBookmarksToMarkdownPipeline":
			out.Values[i] = ec._Mutation_executeBookmarksToMarkdownPipeline(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var numericPropertyImplementors = []string{"NumericProperty", "Property"}

func (ec *executionContext) _NumericProperty(ctx context.Context, sel ast.SelectionSet, obj *model.NumericProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, numericPropertyImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NumericProperty")
		case "name":
			out.Values[i] = ec._NumericProperty_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._NumericProperty_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var observationSettingsImplementors = []string{"ObservationSettings"}

func (ec *executionContext) _ObservationSettings(ctx context.Context, sel ast.SelectionSet, obj *model.ObservationSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, observationSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ObservationSettings")
		case "progressReporterType":
			out.Values[i] = ec._ObservationSettings_progressReporterType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var propertiesImplementors = []string{"Properties"}

func (ec *executionContext) _Properties(ctx context.Context, sel ast.SelectionSet, obj *model.Properties) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, propertiesImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Properties")
		case "all":
			out.Values[i] = ec._Properties_all(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "defaultSettingsBundle":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_defaultSettingsBundle(ctx, field)
				return res
			})
		case "settingsBundle":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_settingsBundle(ctx, field)
				return res
			})
		case "source":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_source(ctx, field)
				return res
			})
		case "bookmarks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_bookmarks(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var repositoriesImplementors = []string{"Repositories"}

func (ec *executionContext) _Repositories(ctx context.Context, sel ast.SelectionSet, obj *model.Repositories) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, repositoriesImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Repositories")
		case "all":
			out.Values[i] = ec._Repositories_all(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var secretTextImplementors = []string{"SecretText", "SecretValue"}

func (ec *executionContext) _SecretText(ctx context.Context, sel ast.SelectionSet, obj *model.SecretText) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, secretTextImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SecretText")
		case "vault":
			out.Values[i] = ec._SecretText_vault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "encryptedText":
			out.Values[i] = ec._SecretText_encryptedText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var settingsBundleImplementors = []string{"SettingsBundle"}

func (ec *executionContext) _SettingsBundle(ctx context.Context, sel ast.SelectionSet, obj *model.SettingsBundle) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, settingsBundleImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SettingsBundle")
		case "name":
			out.Values[i] = ec._SettingsBundle_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "links":
			out.Values[i] = ec._SettingsBundle_links(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "content":
			out.Values[i] = ec._SettingsBundle_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "httpClient":
			out.Values[i] = ec._SettingsBundle_httpClient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "observe":
			out.Values[i] = ec._SettingsBundle_observe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "repositories":
			out.Values[i] = ec._SettingsBundle_repositories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var taxonNodeImplementors = []string{"TaxonNode"}

func (ec *executionContext) _TaxonNode(ctx context.Context, sel ast.SelectionSet, obj *model.TaxonNode) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, taxonNodeImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaxonNode")
		case "taxon":
			out.Values[i] = ec._TaxonNode_taxon(ctx, field, obj)
		case "taxa":
			out.Values[i] = ec._TaxonNode_taxa(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var tempFileRepositoryImplementors = []string{"TempFileRepository", "Repository"}

func (ec *executionContext) _TempFileRepository(ctx context.Context, sel ast.SelectionSet, obj *model.TempFileRepository) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, tempFileRepositoryImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TempFileRepository")
		case "name":
			out.Values[i] = ec._TempFileRepository_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "url":
			out.Values[i] = ec._TempFileRepository_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "prefix":
			out.Values[i] = ec._TempFileRepository_prefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var textPropertyImplementors = []string{"TextProperty", "Property"}

func (ec *executionContext) _TextProperty(ctx context.Context, sel ast.SelectionSet, obj *model.TextProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, textPropertyImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TextProperty")
		case "name":
			out.Values[i] = ec._TextProperty_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._TextProperty_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	invalid := false
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalid {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNActivities2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivities(ctx context.Context, sel ast.SelectionSet, v model.Activities) graphql.Marshaler {
	return ec._Activities(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivity2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivity(ctx context.Context, sel ast.SelectionSet, v model.Activity) graphql.Marshaler {
	return ec._Activity(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNActivityCode2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityCode(ctx context.Context, v interface{}) (model.ActivityCode, error) {
	var res model.ActivityCode
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNActivityCode2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityCode(ctx context.Context, sel ast.SelectionSet, v model.ActivityCode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNActivityContext2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityContext(ctx context.Context, v interface{}) (model.ActivityContext, error) {
	var res model.ActivityContext
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNActivityContext2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityContext(ctx context.Context, sel ast.SelectionSet, v model.ActivityContext) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNActivityError2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityError(ctx context.Context, sel ast.SelectionSet, v model.ActivityError) graphql.Marshaler {
	return ec._ActivityError(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNActivityHumanMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityHumanMessage(ctx context.Context, v interface{}) (model.ActivityHumanMessage, error) {
	var res model.ActivityHumanMessage
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNActivityHumanMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityHumanMessage(ctx context.Context, sel ast.SelectionSet, v model.ActivityHumanMessage) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNActivityMachineMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityMachineMessage(ctx context.Context, v interface{}) (model.ActivityMachineMessage, error) {
	var res model.ActivityMachineMessage
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNActivityMachineMessage2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityMachineMessage(ctx context.Context, sel ast.SelectionSet, v model.ActivityMachineMessage) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNActivityWarning2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityWarning(ctx context.Context, sel ast.SelectionSet, v model.ActivityWarning) graphql.Marshaler {
	return ec._ActivityWarning(ctx, sel, &v)
}

func (ec *executionContext) marshalNBookmark2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmark(ctx context.Context, sel ast.SelectionSet, v model.Bookmark) graphql.Marshaler {
	return ec._Bookmark(ctx, sel, &v)
}

func (ec *executionContext) marshalNBookmarkLink2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarkLink(ctx context.Context, sel ast.SelectionSet, v model.BookmarkLink) graphql.Marshaler {
	return ec._BookmarkLink(ctx, sel, &v)
}

func (ec *executionContext) marshalNBookmarksAPISource2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarksAPISource(ctx context.Context, sel ast.SelectionSet, v model.BookmarksAPISource) graphql.Marshaler {
	return ec._BookmarksAPISource(ctx, sel, &v)
}

func (ec *executionContext) marshalNBookmarksToMarkdownPipelineExecution2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarksToMarkdownPipelineExecution(ctx context.Context, sel ast.SelectionSet, v model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	return ec._BookmarksToMarkdownPipelineExecution(ctx, sel, &v)
}

func (ec *executionContext) marshalNBookmarksToMarkdownPipelineExecution2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarksToMarkdownPipelineExecution(ctx context.Context, sel ast.SelectionSet, v *model.BookmarksToMarkdownPipelineExecution) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BookmarksToMarkdownPipelineExecution(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBookmarksToMarkdownPipelineInput2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarksToMarkdownPipelineInput(ctx context.Context, v interface{}) (model.BookmarksToMarkdownPipelineInput, error) {
	return ec.unmarshalInputBookmarksToMarkdownPipelineInput(ctx, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) marshalNContentBodySettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentBodySettings(ctx context.Context, sel ast.SelectionSet, v model.ContentBodySettings) graphql.Marshaler {
	return ec._ContentBodySettings(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNContentBodyText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentBodyText(ctx context.Context, v interface{}) (model.ContentBodyText, error) {
	var res model.ContentBodyText
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNContentBodyText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentBodyText(ctx context.Context, sel ast.SelectionSet, v model.ContentBodyText) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNContentSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSettings(ctx context.Context, sel ast.SelectionSet, v model.ContentSettings) graphql.Marshaler {
	return ec._ContentSettings(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNContentSummaryPolicy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSummaryPolicy(ctx context.Context, v interface{}) (model.ContentSummaryPolicy, error) {
	var res model.ContentSummaryPolicy
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNContentSummaryPolicy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSummaryPolicy(ctx context.Context, sel ast.SelectionSet, v model.ContentSummaryPolicy) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNContentSummarySettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSummarySettings(ctx context.Context, sel ast.SelectionSet, v model.ContentSummarySettings) graphql.Marshaler {
	return ec._ContentSummarySettings(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNContentSummaryText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSummaryText(ctx context.Context, v interface{}) (model.ContentSummaryText, error) {
	var res model.ContentSummaryText
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNContentSummaryText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSummaryText(ctx context.Context, sel ast.SelectionSet, v model.ContentSummaryText) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNContentTitleSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleSettings(ctx context.Context, sel ast.SelectionSet, v model.ContentTitleSettings) graphql.Marshaler {
	return ec._ContentTitleSettings(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNContentTitleSuffixPolicy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleSuffixPolicy(ctx context.Context, v interface{}) (model.ContentTitleSuffixPolicy, error) {
	var res model.ContentTitleSuffixPolicy
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNContentTitleSuffixPolicy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleSuffixPolicy(ctx context.Context, sel ast.SelectionSet, v model.ContentTitleSuffixPolicy) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContentTitleText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleText(ctx context.Context, v interface{}) (model.ContentTitleText, error) {
	var res model.ContentTitleText
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNContentTitleText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentTitleText(ctx context.Context, sel ast.SelectionSet, v model.ContentTitleText) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDateTime2githubᚗcomᚋlectioᚋgraphᚋmodelᚐDateTime(ctx context.Context, v interface{}) (model.DateTime, error) {
	var res model.DateTime
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNDateTime2githubᚗcomᚋlectioᚋgraphᚋmodelᚐDateTime(ctx context.Context, sel ast.SelectionSet, v model.DateTime) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNExecutePipelineInput2githubᚗcomᚋlectioᚋgraphᚋmodelᚐExecutePipelineInput(ctx context.Context, v interface{}) (model.ExecutePipelineInput, error) {
	return ec.unmarshalInputExecutePipelineInput(ctx, v)
}

func (ec *executionContext) unmarshalNFileRepositoryPath2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNFileRepositoryPath2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) marshalNHTTPClientSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐHTTPClientSettings(ctx context.Context, sel ast.SelectionSet, v model.HTTPClientSettings) graphql.Marshaler {
	return ec._HTTPClientSettings(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNHTTPClientTimeoutDuration2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTimeoutDuration(ctx context.Context, v interface{}) (model.TimeoutDuration, error) {
	var res model.TimeoutDuration
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNHTTPClientTimeoutDuration2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTimeoutDuration(ctx context.Context, sel ast.SelectionSet, v model.TimeoutDuration) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) marshalNLinkLifecyleSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkLifecyleSettings(ctx context.Context, sel ast.SelectionSet, v model.LinkLifecyleSettings) graphql.Marshaler {
	return ec._LinkLifecyleSettings(ctx, sel, &v)
}

func (ec *executionContext) marshalNLinkScorer2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScorer(ctx context.Context, sel ast.SelectionSet, v model.LinkScorer) graphql.Marshaler {
	return ec._LinkScorer(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNLinkScorerHumanName2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNLinkScorerHumanName2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalNLinkScorerMachineName2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNLinkScorerMachineName2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) marshalNLinkScores2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScores(ctx context.Context, sel ast.SelectionSet, v model.LinkScores) graphql.Marshaler {
	return ec._LinkScores(ctx, sel, &v)
}

func (ec *executionContext) marshalNLinkScores2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScores(ctx context.Context, sel ast.SelectionSet, v []model.LinkScores) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLinkScores2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScores(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLinkScoresLifecycleSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScoresLifecycleSettings(ctx context.Context, sel ast.SelectionSet, v model.LinkScoresLifecycleSettings) graphql.Marshaler {
	return ec._LinkScoresLifecycleSettings(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNMarkdownFlavor2githubᚗcomᚋlectioᚋgraphᚋmodelᚐMarkdownFlavor(ctx context.Context, v interface{}) (model.MarkdownFlavor, error) {
	var res model.MarkdownFlavor
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNMarkdownFlavor2githubᚗcomᚋlectioᚋgraphᚋmodelᚐMarkdownFlavor(ctx context.Context, sel ast.SelectionSet, v model.MarkdownFlavor) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNameText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐNameText(ctx context.Context, v interface{}) (model.NameText, error) {
	tmp, err := graphql.UnmarshalString(v)
	return model.NameText(tmp), err
}

func (ec *executionContext) marshalNNameText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐNameText(ctx context.Context, sel ast.SelectionSet, v model.NameText) graphql.Marshaler {
	return graphql.MarshalString(string(v))
}

func (ec *executionContext) marshalNObservationSettings2githubᚗcomᚋlectioᚋgraphᚋmodelᚐObservationSettings(ctx context.Context, sel ast.SelectionSet, v model.ObservationSettings) graphql.Marshaler {
	return ec._ObservationSettings(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineExecution2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecution(ctx context.Context, sel ast.SelectionSet, v model.PipelineExecution) graphql.Marshaler {
	return ec._PipelineExecution(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNPipelineExecutionID2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecutionID(ctx context.Context, v interface{}) (model.PipelineExecutionID, error) {
	var res model.PipelineExecutionID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNPipelineExecutionID2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecutionID(ctx context.Context, sel ast.SelectionSet, v model.PipelineExecutionID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPipelineExecutionStrategy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecutionStrategy(ctx context.Context, v interface{}) (model.PipelineExecutionStrategy, error) {
	var res model.PipelineExecutionStrategy
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNPipelineExecutionStrategy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineExecutionStrategy(ctx context.Context, sel ast.SelectionSet, v model.PipelineExecutionStrategy) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPipelineParamInput2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineParamInput(ctx context.Context, v interface{}) (model.PipelineParamInput, error) {
	return ec.unmarshalInputPipelineParamInput(ctx, v)
}

func (ec *executionContext) unmarshalNPipelineParamName2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNPipelineParamName2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalNPipelineURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineURL(ctx context.Context, v interface{}) (model.PipelineURL, error) {
	var res model.PipelineURL
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNPipelineURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineURL(ctx context.Context, sel ast.SelectionSet, v model.PipelineURL) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNProgressReporterType2githubᚗcomᚋlectioᚋgraphᚋmodelᚐProgressReporterType(ctx context.Context, v interface{}) (model.ProgressReporterType, error) {
	var res model.ProgressReporterType
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNProgressReporterType2githubᚗcomᚋlectioᚋgraphᚋmodelᚐProgressReporterType(ctx context.Context, sel ast.SelectionSet, v model.ProgressReporterType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProperty2githubᚗcomᚋlectioᚋgraphᚋmodelᚐProperty(ctx context.Context, sel ast.SelectionSet, v model.Property) graphql.Marshaler {
	return ec._Property(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNPropertyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPropertyName(ctx context.Context, v interface{}) (model.PropertyName, error) {
	tmp, err := graphql.UnmarshalString(v)
	return model.PropertyName(tmp), err
}

func (ec *executionContext) marshalNPropertyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPropertyName(ctx context.Context, sel ast.SelectionSet, v model.PropertyName) graphql.Marshaler {
	return graphql.MarshalString(string(v))
}

func (ec *executionContext) marshalNRepositories2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepositories(ctx context.Context, sel ast.SelectionSet, v model.Repositories) graphql.Marshaler {
	return ec._Repositories(ctx, sel, &v)
}

func (ec *executionContext) marshalNRepository2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepository(ctx context.Context, sel ast.SelectionSet, v model.Repository) graphql.Marshaler {
	return ec._Repository(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNRepositoryName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepositoryName(ctx context.Context, v interface{}) (model.RepositoryName, error) {
	var res model.RepositoryName
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRepositoryName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepositoryName(ctx context.Context, sel ast.SelectionSet, v model.RepositoryName) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRepositoryURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx context.Context, v interface{}) (model.URLText, error) {
	var res model.URLText
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRepositoryURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx context.Context, sel ast.SelectionSet, v model.URLText) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSecretText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSecretText(ctx context.Context, sel ast.SelectionSet, v model.SecretText) graphql.Marshaler {
	return ec._SecretText(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNSecretsVault2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSecretsVault(ctx context.Context, v interface{}) (model.SecretsVault, error) {
	var res model.SecretsVault
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNSecretsVault2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSecretsVault(ctx context.Context, sel ast.SelectionSet, v model.SecretsVault) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSettingsBundleName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundleName(ctx context.Context, v interface{}) (model.SettingsBundleName, error) {
	var res model.SettingsBundleName
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNSettingsBundleName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundleName(ctx context.Context, sel ast.SelectionSet, v model.SettingsBundleName) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalNTaxonName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx context.Context, v interface{}) (model.TaxonName, error) {
	tmp, err := graphql.UnmarshalString(v)
	return model.TaxonName(tmp), err
}

func (ec *executionContext) marshalNTaxonName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx context.Context, sel ast.SelectionSet, v model.TaxonName) graphql.Marshaler {
	return graphql.MarshalString(string(v))
}

func (ec *executionContext) unmarshalNTaxonName2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx context.Context, v interface{}) ([]model.TaxonName, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.TaxonName, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNTaxonName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNTaxonName2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx context.Context, sel ast.SelectionSet, v []model.TaxonName) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTaxonName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNTaxonNode2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonNode(ctx context.Context, sel ast.SelectionSet, v model.TaxonNode) graphql.Marshaler {
	return ec._TaxonNode(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaxonNode2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonNode(ctx context.Context, sel ast.SelectionSet, v []model.TaxonNode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaxonNode2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTaxonomy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonomy(ctx context.Context, sel ast.SelectionSet, v model.Taxonomy) graphql.Marshaler {
	return ec._Taxonomy(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaxonomy2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonomy(ctx context.Context, sel ast.SelectionSet, v []model.Taxonomy) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaxonomy2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonomy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNTaxonomyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonomyName(ctx context.Context, v interface{}) (model.TaxonomyName, error) {
	tmp, err := graphql.UnmarshalString(v)
	return model.TaxonomyName(tmp), err
}

func (ec *executionContext) marshalNTaxonomyName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonomyName(ctx context.Context, sel ast.SelectionSet, v model.TaxonomyName) graphql.Marshaler {
	return graphql.MarshalString(string(v))
}

func (ec *executionContext) unmarshalNTempFileRepositoryPrefix2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNTempFileRepositoryPrefix2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx context.Context, v interface{}) (model.URLText, error) {
	var res model.URLText
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNURLText2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURLText(ctx context.Context, sel ast.SelectionSet, v model.URLText) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) marshalOActivity2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐActivity(ctx context.Context, sel ast.SelectionSet, v []model.Activity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivity2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOActivityError2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityError(ctx context.Context, sel ast.SelectionSet, v []model.ActivityError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivityError2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOActivityWarning2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityWarning(ctx context.Context, sel ast.SelectionSet, v []model.ActivityWarning) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivityWarning2githubᚗcomᚋlectioᚋgraphᚋmodelᚐActivityWarning(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBookmark2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmark(ctx context.Context, sel ast.SelectionSet, v []model.Bookmark) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBookmark2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmark(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBookmarks2githubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarks(ctx context.Context, sel ast.SelectionSet, v model.Bookmarks) graphql.Marshaler {
	return ec._Bookmarks(ctx, sel, &v)
}

func (ec *executionContext) marshalOBookmarks2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐBookmarks(ctx context.Context, sel ast.SelectionSet, v *model.Bookmarks) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Bookmarks(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOContentSource2githubᚗcomᚋlectioᚋgraphᚋmodelᚐContentSource(ctx context.Context, sel ast.SelectionSet, v model.ContentSource) graphql.Marshaler {
	return ec._ContentSource(ctx, sel, &v)
}

func (ec *executionContext) marshalOLinkScores2githubᚗcomᚋlectioᚋgraphᚋmodelᚐLinkScores(ctx context.Context, sel ast.SelectionSet, v model.LinkScores) graphql.Marshaler {
	return ec._LinkScores(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOPipelineParamInput2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineParamInput(ctx context.Context, v interface{}) ([]model.PipelineParamInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.PipelineParamInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNPipelineParamInput2githubᚗcomᚋlectioᚋgraphᚋmodelᚐPipelineParamInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProperties2githubᚗcomᚋlectioᚋgraphᚋmodelᚐProperties(ctx context.Context, sel ast.SelectionSet, v model.Properties) graphql.Marshaler {
	return ec._Properties(ctx, sel, &v)
}

func (ec *executionContext) marshalOProperties2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐProperties(ctx context.Context, sel ast.SelectionSet, v *model.Properties) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Properties(ctx, sel, v)
}

func (ec *executionContext) marshalOProperty2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐProperty(ctx context.Context, sel ast.SelectionSet, v []model.Property) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProperty2githubᚗcomᚋlectioᚋgraphᚋmodelᚐProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalORegularExpression2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx context.Context, v interface{}) (model.RegularExpression, error) {
	var res model.RegularExpression
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalORegularExpression2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx context.Context, sel ast.SelectionSet, v model.RegularExpression) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalORegularExpression2ᚕᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx context.Context, v interface{}) ([]*model.RegularExpression, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegularExpression, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalORegularExpression2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORegularExpression2ᚕᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx context.Context, sel ast.SelectionSet, v []*model.RegularExpression) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalORegularExpression2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalORegularExpression2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx context.Context, v interface{}) (*model.RegularExpression, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORegularExpression2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORegularExpression2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRegularExpression(ctx context.Context, sel ast.SelectionSet, v *model.RegularExpression) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalORepository2ᚕgithubᚗcomᚋlectioᚋgraphᚋmodelᚐRepository(ctx context.Context, sel ast.SelectionSet, v []model.Repository) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRepository2githubᚗcomᚋlectioᚋgraphᚋmodelᚐRepository(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSettingsBundle2githubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundle(ctx context.Context, sel ast.SelectionSet, v model.SettingsBundle) graphql.Marshaler {
	return ec._SettingsBundle(ctx, sel, &v)
}

func (ec *executionContext) marshalOSettingsBundle2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐSettingsBundle(ctx context.Context, sel ast.SelectionSet, v *model.SettingsBundle) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SettingsBundle(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOTaxonName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx context.Context, v interface{}) (model.TaxonName, error) {
	tmp, err := graphql.UnmarshalString(v)
	return model.TaxonName(tmp), err
}

func (ec *executionContext) marshalOTaxonName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx context.Context, sel ast.SelectionSet, v model.TaxonName) graphql.Marshaler {
	return graphql.MarshalString(string(v))
}

func (ec *executionContext) unmarshalOTaxonName2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx context.Context, v interface{}) (*model.TaxonName, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTaxonName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTaxonName2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx context.Context, sel ast.SelectionSet, v *model.TaxonName) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOTaxonName2githubᚗcomᚋlectioᚋgraphᚋmodelᚐTaxonName(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURL(ctx context.Context, v interface{}) (model.URL, error) {
	var res model.URL
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURL(ctx context.Context, sel ast.SelectionSet, v model.URL) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOURL2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐURL(ctx context.Context, v interface{}) (*model.URL, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOURL2githubᚗcomᚋlectioᚋgraphᚋmodelᚐURL(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOURL2ᚖgithubᚗcomᚋlectioᚋgraphᚋmodelᚐURL(ctx context.Context, sel ast.SelectionSet, v *model.URL) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
